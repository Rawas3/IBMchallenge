{"ast":null,"code":"\"use strict\";\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.normalizeGifs = exports.normalizeGif = exports.USER_BOOL_PROPS = exports.BOOL_PROPS = void 0;\n/**\n * @hidden\n */\n\nexports.BOOL_PROPS = ['is_anonymous', 'is_community', 'is_featured', 'is_hidden', 'is_indexable', 'is_preserve_size', 'is_realtime', 'is_removed', 'is_sticker', 'is_dynamic' // not finalized, and not adding to Gif type until type RFC is finished\n];\n/**\n * @hidden\n */\n\nexports.USER_BOOL_PROPS = ['suppress_chrome', 'is_public', 'is_verified'];\n\nvar makeBool = function (obj) {\n  return function (prop) {\n    return obj[prop] = !!obj[prop];\n  };\n}; // tags sometimes are objects that have a text prop, sometimes they're strings\n\n\nvar getTag = function (tag) {\n  return typeof tag === 'string' ? tag : tag.text;\n};\n\nvar normalize = function (gif) {\n  var newGif = __assign({}, gif);\n\n  newGif.id = String(newGif.id);\n  newGif.tags = (newGif.tags || []).map(getTag);\n  exports.BOOL_PROPS.forEach(makeBool(newGif));\n  Object.keys(newGif.images || {}).forEach(function (name) {\n    var img = newGif.images[name];\n    img.width = parseInt(img.width);\n    img.height = parseInt(img.height);\n  });\n  var user = newGif.user;\n\n  if (user) {\n    var newUser = __assign({}, user);\n\n    exports.USER_BOOL_PROPS.forEach(makeBool(newUser));\n    newGif.user = newUser;\n  }\n\n  return newGif;\n};\n/**\n * @hidden\n */\n\n\nvar normalizeGif = function (result) {\n  result.data = normalize(result.data);\n  return result;\n};\n\nexports.normalizeGif = normalizeGif;\n/**\n * @hidden\n */\n\nvar normalizeGifs = function (result) {\n  result.data = result.data.map(function (gif) {\n    return normalize(gif);\n  });\n  return result;\n};\n\nexports.normalizeGifs = normalizeGifs;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;AAGA;;;;AAGaA,qBAAa,CACtB,cADsB,EAEtB,cAFsB,EAGtB,aAHsB,EAItB,WAJsB,EAKtB,cALsB,EAMtB,kBANsB,EAOtB,aAPsB,EAQtB,YARsB,EAStB,YATsB,EAUtB,YAVsB,CAUR;AAVQ,CAAb;AAab;;;;AAGaA,0BAAkB,CAAC,iBAAD,EAAoB,WAApB,EAAiC,aAAjC,CAAlB;;AAEb,IAAMC,QAAQ,GAAG,UAACC,GAAD,EAAS;AAAK,mBAACC,IAAD,EAAa;AAAK,WAACD,GAAG,CAACC,IAAD,CAAH,GAAY,CAAC,CAACD,GAAG,CAACC,IAAD,CAAlB;AAAyB,GAA3C;AAA2C,CAA1E,C,CAIA;;;AACA,IAAMC,MAAM,GAAG,UAACC,GAAD,EAAkB;AAAK,SAAC,OAAOA,GAAP,KAAe,QAAf,GAA2BA,GAA3B,GAA6CA,GAAW,CAACC,IAA1D;AAA+D,CAArG;;AAEA,IAAMC,SAAS,GAAG,UAACC,GAAD,EAAS;AACvB,MAAMC,MAAM,gBAAcD,GAAd,CAAZ;;AACAC,QAAM,CAACC,EAAP,GAAYC,MAAM,CAACF,MAAM,CAACC,EAAR,CAAlB;AACAD,QAAM,CAACG,IAAP,GAAc,CAACH,MAAM,CAACG,IAAP,IAAe,EAAhB,EAAoBC,GAApB,CAAwBT,MAAxB,CAAd;AACAJ,qBAAWc,OAAX,CAAmBb,QAAQ,CAACQ,MAAD,CAA3B;AACAM,QAAM,CAACC,IAAP,CAAYP,MAAM,CAACQ,MAAP,IAAiB,EAA7B,EAAiCH,OAAjC,CAAyC,UAACI,IAAD,EAAa;AAClD,QAAMC,GAAG,GAAGV,MAAM,CAACQ,MAAP,CAAcC,IAAd,CAAZ;AACAC,OAAG,CAACC,KAAJ,GAAYC,QAAQ,CAACF,GAAG,CAACC,KAAL,CAApB;AACAD,OAAG,CAACG,MAAJ,GAAaD,QAAQ,CAACF,GAAG,CAACG,MAAL,CAArB;AACH,GAJD;AAMQ,UAAI,GAAKb,MAAM,KAAf;;AACR,MAAIc,IAAJ,EAAU;AACN,QAAMC,OAAO,gBAAQD,IAAR,CAAb;;AACAvB,4BAAgBc,OAAhB,CAAwBb,QAAQ,CAACuB,OAAD,CAAhC;AACAf,UAAM,CAACc,IAAP,GAAcC,OAAd;AACH;;AACD,SAAOf,MAAP;AACH,CAlBD;AAoBA;;;;;AAGO,IAAMgB,YAAY,GAAG,UAACC,MAAD,EAAkB;AAC1CA,QAAM,CAACC,IAAP,GAAcpB,SAAS,CAACmB,MAAM,CAACC,IAAR,CAAvB;AACA,SAAOD,MAAP;AACH,CAHM;;AAAM1B,uBAAYyB,YAAZ;AAKb;;;;AAGO,IAAMG,aAAa,GAAG,UAACF,MAAD,EAAmB;AAC5CA,QAAM,CAACC,IAAP,GAAcD,MAAM,CAACC,IAAP,CAAYd,GAAZ,CAAgB,UAACL,GAAD,EAAI;AAAK,oBAAS,CAACA,GAAD,CAAT;AAAc,GAAvC,CAAd;AACA,SAAOkB,MAAP;AACH,CAHM;;AAAM1B,wBAAa4B,aAAb","names":["exports","makeBool","obj","prop","getTag","tag","text","normalize","gif","newGif","id","String","tags","map","forEach","Object","keys","images","name","img","width","parseInt","height","user","newUser","normalizeGif","result","data","normalizeGifs"],"sourceRoot":"","sources":["../../src/normalize/gif.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}