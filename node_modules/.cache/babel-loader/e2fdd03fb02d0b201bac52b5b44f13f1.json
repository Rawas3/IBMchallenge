{"ast":null,"code":"\"use strict\";\n/**\n * Copyright 2014 IBM Corp. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.RequestWrapper = void 0;\n\nvar axios_1 = require(\"axios\");\n\nvar axios_cookiejar_support_1 = require(\"axios-cookiejar-support\");\n\nvar extend = require(\"extend\");\n\nvar FormData = require(\"form-data\");\n\nvar https = require(\"https\");\n\nvar querystring = require(\"querystring\");\n\nvar helper_1 = require(\"./helper\");\n\nvar logger_1 = require(\"./logger\");\n\nvar isBrowser = typeof window === 'object';\nvar globalTransactionId = 'x-global-transaction-id';\n\nvar RequestWrapper =\n/** @class */\nfunction () {\n  function RequestWrapper(axiosOptions) {\n    axiosOptions = axiosOptions || {}; // override several axios defaults\n    // axios sets the default Content-Type for `post`, `put`, and `patch` operations\n    // to 'application/x-www-form-urlencoded'. This causes problems, so overriding the\n    // defaults here\n\n    var axiosConfig = {\n      maxContentLength: Infinity,\n      headers: {\n        post: {\n          'Content-Type': 'application/json'\n        },\n        put: {\n          'Content-Type': 'application/json'\n        },\n        patch: {\n          'Content-Type': 'application/json'\n        }\n      }\n    }; // merge axios config into default\n\n    extend(true, axiosConfig, axiosOptions); // if the user explicitly sets `disableSslVerification` to true,\n    // `rejectUnauthorized` must be set to false in the https agent\n\n    if (axiosOptions.disableSslVerification === true) {\n      // the user may have already provided a custom agent. if so, update it\n      if (axiosConfig.httpsAgent) {\n        // check for presence of `options` field for \"type safety\"\n        if (axiosConfig.httpsAgent.options) {\n          axiosConfig.httpsAgent.options.rejectUnauthorized = false;\n        }\n      } else {\n        // if no agent is present, create a new one\n        axiosConfig.httpsAgent = new https.Agent({\n          rejectUnauthorized: false\n        });\n      }\n    }\n\n    this.axiosInstance = axios_1.default.create(axiosConfig); // if a cookie jar is provided, wrap the axios instance and update defaults\n\n    if (axiosOptions.jar) {\n      axios_cookiejar_support_1.default(this.axiosInstance);\n      this.axiosInstance.defaults.withCredentials = true;\n      this.axiosInstance.defaults.jar = axiosOptions.jar;\n    } // set debug interceptors\n\n\n    if (process.env.NODE_DEBUG === 'axios' || process.env.DEBUG) {\n      this.axiosInstance.interceptors.request.use(function (config) {\n        logger_1.default.debug('Request:');\n\n        try {\n          logger_1.default.debug(JSON.stringify(config, null, 2));\n        } catch (_a) {\n          logger_1.default.error(config);\n        }\n\n        return config;\n      }, function (error) {\n        logger_1.default.error('Error: ');\n\n        try {\n          logger_1.default.error(JSON.stringify(error, null, 2));\n        } catch (_a) {\n          logger_1.default.error(error);\n        }\n\n        return Promise.reject(error);\n      });\n      this.axiosInstance.interceptors.response.use(function (response) {\n        logger_1.default.debug('Response:');\n\n        try {\n          logger_1.default.debug(JSON.stringify(response, null, 2));\n        } catch (_a) {\n          logger_1.default.error(response);\n        }\n\n        return response;\n      }, function (error) {\n        logger_1.default.error('Error: ');\n\n        try {\n          logger_1.default.error(JSON.stringify(error, null, 2));\n        } catch (_a) {\n          logger_1.default.error(error);\n        }\n\n        return Promise.reject(error);\n      });\n    }\n  }\n  /**\n   * Creates the request.\n   * 1. Merge default options with user provided options\n   * 2. Checks for missing parameters\n   * 3. Encode path and query parameters\n   * 4. Call the api\n   * @private\n   * @returns {ReadableStream|undefined}\n   * @throws {Error}\n   */\n\n\n  RequestWrapper.prototype.sendRequest = function (parameters) {\n    var _this = this;\n\n    var options = extend(true, {}, parameters.defaultOptions, parameters.options);\n    var path = options.path,\n        body = options.body,\n        form = options.form,\n        formData = options.formData,\n        qs = options.qs,\n        method = options.method,\n        serviceUrl = options.serviceUrl;\n    var headers = options.headers,\n        url = options.url;\n    var multipartForm = new FormData(); // Form params\n\n    if (formData) {\n      Object.keys(formData).forEach(function (key) {\n        var values = Array.isArray(formData[key]) ? formData[key] : [formData[key]]; // Skip keys with undefined/null values or empty object value\n\n        values.filter(function (v) {\n          return v != null && !helper_1.isEmptyObject(v);\n        }).forEach(function (value) {\n          // Special case of empty file object\n          if (value.hasOwnProperty('contentType') && !value.hasOwnProperty('data')) {\n            return;\n          }\n\n          if (helper_1.isFileWithMetadata(value)) {\n            var fileObj = helper_1.buildRequestFileObject(value);\n            multipartForm.append(key, fileObj.value, fileObj.options);\n          } else {\n            if (typeof value === 'object' && !helper_1.isFileData(value)) {\n              value = JSON.stringify(value);\n            }\n\n            multipartForm.append(key, value);\n          }\n        });\n      });\n    } // Path params\n\n\n    url = parsePath(url, path); // Headers\n\n    options.headers = Object.assign({}, options.headers); // Convert array-valued query params to strings\n\n    if (qs && Object.keys(qs).length > 0) {\n      Object.keys(qs).forEach(function (key) {\n        return Array.isArray(qs[key]) && (qs[key] = qs[key].join(','));\n      });\n    } // Add service default endpoint if options.url start with /\n\n\n    if (url && url.charAt(0) === '/') {\n      url = helper_1.stripTrailingSlash(serviceUrl) + url;\n    }\n\n    url = helper_1.stripTrailingSlash(url);\n    var data = body;\n\n    if (form) {\n      data = querystring.stringify(form);\n      headers['Content-type'] = 'application/x-www-form-urlencoded';\n    }\n\n    if (formData) {\n      data = multipartForm; // form-data generates headers that MUST be included or the request will fail\n\n      headers = extend(true, {}, headers, multipartForm.getHeaders());\n    } // TEMPORARY: Disabling gzipping due to bug in axios until fix is released:\n    // https://github.com/axios/axios/pull/1129\n    // accept gzip encoded responses if Accept-Encoding is not already set\n    // headers['Accept-Encoding'] = headers['Accept-Encoding'] || 'gzip';\n\n\n    var requestParams = {\n      url: url,\n      method: method,\n      headers: headers,\n      params: qs,\n      data: data,\n      responseType: options.responseType || 'json',\n      paramsSerializer: function (params) {\n        return querystring.stringify(params);\n      }\n    };\n    return this.axiosInstance(requestParams).then(function (res) {\n      // sometimes error responses will still trigger the `then` block - escape that behavior here\n      if (!res) {\n        return;\n      }\n\n      ; // these objects contain circular json structures and are not always relevant to the user\n      // if the user wants them, they can be accessed through the debug properties\n\n      delete res.config;\n      delete res.request; // the other sdks use the interface `result` for the body\n\n      res.result = res.data;\n      delete res.data; // return another promise that resolves with 'res' to be handled in generated code\n\n      return res;\n    }, function (err) {\n      // return another promise that rejects with 'err' to be handled in generated code\n      throw _this.formatError(err);\n    });\n  };\n  /**\n   * Format error returned by axios\n   * @param  {object} the object returned by axios via rejection\n   * @private\n   * @returns {Error}\n   */\n\n\n  RequestWrapper.prototype.formatError = function (axiosError) {\n    // return an actual error object,\n    // but make it flexible so we can add properties like 'body'\n    var error = new Error(); // axios specific handling\n    // this branch is for an error received from the service\n\n    if (axiosError.response) {\n      axiosError = axiosError.response; // The request was made and the server responded with a status code\n      // that falls out of the range of 2xx\n\n      delete axiosError.config;\n      delete axiosError.request;\n      error.statusText = axiosError.statusText;\n      error.name = axiosError.statusText; // ** deprecated **\n\n      error.status = axiosError.status;\n      error.code = axiosError.status; // ** deprecated **\n\n      error.message = parseServiceErrorMessage(axiosError.data) || axiosError.statusText; // some services bury the useful error message within 'data'\n      // adding it to the error under the key 'body' as a string or object\n\n      var errorBody = void 0;\n\n      try {\n        // try/catch to handle objects with circular references\n        errorBody = JSON.stringify(axiosError.data);\n      } catch (e) {\n        // ignore the error, use the object, and tack on a warning\n        errorBody = axiosError.data;\n        errorBody.warning = 'Body contains circular reference';\n        logger_1.default.error(\"Failed to stringify axiosError: \" + e);\n      }\n\n      error.body = errorBody; // attach headers to error object\n\n      error.headers = axiosError.headers; // print a more descriptive error message for auth issues\n\n      if (isAuthenticationError(axiosError)) {\n        error.message = 'Access is denied due to invalid credentials.';\n      }\n    } else if (axiosError.request) {\n      // The request was made but no response was received\n      // `error.request` is an instance of XMLHttpRequest in the browser and an instance of\n      // http.ClientRequest in node.js\n      error.message = axiosError.message;\n      error.statusText = axiosError.code;\n      error.body = 'Response not received - no connection was made to the service.'; // when a request to a private cloud instance has an ssl problem, it never connects and follows this branch of the error handling\n\n      if (isSelfSignedCertificateError(axiosError)) {\n        error.message = \"The connection failed because the SSL certificate is not valid. \" + \"To use a self-signed certificate, set the `disableSslVerification` parameter in the constructor options.\";\n      }\n    } else {\n      // Something happened in setting up the request that triggered an Error\n      error.message = axiosError.message;\n    }\n\n    return error;\n  };\n\n  return RequestWrapper;\n}();\n\nexports.RequestWrapper = RequestWrapper;\n/**\n * @private\n * @param {string} path\n * @param {Object} params\n * @returns {string}\n */\n\nfunction parsePath(path, params) {\n  if (!path || !params) {\n    return path;\n  }\n\n  return Object.keys(params).reduce(function (parsedPath, param) {\n    var value = encodeURIComponent(params[param]);\n    return parsedPath.replace(new RegExp(\"{\" + param + \"}\"), value);\n  }, path);\n}\n/**\n * Determine if the error is due to bad credentials\n * @private\n * @param {Object} error - error object returned from axios\n * @returns {boolean} true if error is due to authentication\n */\n\n\nfunction isAuthenticationError(error) {\n  var isAuthErr = false;\n  var code = error.status || null;\n  var body = error.data || {}; // handle specific error from iam service, should be relevant across platforms\n\n  var isIamServiceError = body.context && body.context.url && body.context.url.indexOf('iam') > -1;\n\n  if (code === 401 || code === 403 || isIamServiceError) {\n    isAuthErr = true;\n  }\n\n  return isAuthErr;\n}\n/**\n * Determine if the error is due to a bad self signed certificate\n * @private\n * @param {Object} error - error object returned from axios\n * @returns {boolean} true if error is due to an SSL error\n */\n\n\nfunction isSelfSignedCertificateError(error) {\n  var result = false;\n  var sslCode = 'DEPTH_ZERO_SELF_SIGNED_CERT';\n  var sslMessage = 'self signed certificate';\n  var hasSslCode = error.code === sslCode;\n  var hasSslMessage = hasStringProperty(error, 'message') && error.message.includes(sslMessage);\n\n  if (hasSslCode || hasSslMessage) {\n    result = true;\n  }\n\n  return result;\n}\n/**\n * Return true if object has a specified property that is a string\n * @private\n * @param {Object} obj - object to look for property in\n * @param {string} property - name of the property to look for\n * @returns {boolean} true if property exists and is string\n */\n\n\nfunction hasStringProperty(obj, property) {\n  return Boolean(obj[property] && typeof obj[property] === 'string');\n}\n/**\n * Look for service error message in common places, by priority\n * first look in `errors[0].message`, then in `error`, then in\n * `message`, then in `errorMessage`\n * @private\n * @param {Object} response - error response body received from service\n * @returns {string | undefined} the error message if is was found, undefined otherwise\n */\n\n\nfunction parseServiceErrorMessage(response) {\n  var message;\n\n  if (Array.isArray(response.errors) && response.errors.length > 0 && hasStringProperty(response.errors[0], 'message')) {\n    message = response.errors[0].message;\n  } else if (hasStringProperty(response, 'error')) {\n    message = response.error;\n  } else if (hasStringProperty(response, 'message')) {\n    message = response.message;\n  } else if (hasStringProperty(response, 'errorMessage')) {\n    message = response.errorMessage;\n  }\n\n  logger_1.default.info(\"Parsing service error message: \" + message);\n  return message;\n}","map":{"version":3,"sources":["D:/2.Programavimas/Projects/JAVA/IdeaProject/IBMchallenge/node_modules/ibm-cloud-sdk-core/lib/request-wrapper.js"],"names":["Object","defineProperty","exports","value","RequestWrapper","axios_1","require","axios_cookiejar_support_1","extend","FormData","https","querystring","helper_1","logger_1","isBrowser","window","globalTransactionId","axiosOptions","axiosConfig","maxContentLength","Infinity","headers","post","put","patch","disableSslVerification","httpsAgent","options","rejectUnauthorized","Agent","axiosInstance","default","create","jar","defaults","withCredentials","process","env","NODE_DEBUG","DEBUG","interceptors","request","use","config","debug","JSON","stringify","_a","error","Promise","reject","response","prototype","sendRequest","parameters","_this","defaultOptions","path","body","form","formData","qs","method","serviceUrl","url","multipartForm","keys","forEach","key","values","Array","isArray","filter","v","isEmptyObject","hasOwnProperty","isFileWithMetadata","fileObj","buildRequestFileObject","append","isFileData","parsePath","assign","length","join","charAt","stripTrailingSlash","data","getHeaders","requestParams","params","responseType","paramsSerializer","then","res","result","err","formatError","axiosError","Error","statusText","name","status","code","message","parseServiceErrorMessage","errorBody","e","warning","isAuthenticationError","isSelfSignedCertificateError","reduce","parsedPath","param","encodeURIComponent","replace","RegExp","isAuthErr","isIamServiceError","context","indexOf","sslCode","sslMessage","hasSslCode","hasSslMessage","hasStringProperty","includes","obj","property","Boolean","errors","errorMessage","info"],"mappings":"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","sourcesContent":["\"use strict\";\n/**\n * Copyright 2014 IBM Corp. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.RequestWrapper = void 0;\nvar axios_1 = require(\"axios\");\nvar axios_cookiejar_support_1 = require(\"axios-cookiejar-support\");\nvar extend = require(\"extend\");\nvar FormData = require(\"form-data\");\nvar https = require(\"https\");\nvar querystring = require(\"querystring\");\nvar helper_1 = require(\"./helper\");\nvar logger_1 = require(\"./logger\");\nvar isBrowser = typeof window === 'object';\nvar globalTransactionId = 'x-global-transaction-id';\nvar RequestWrapper = /** @class */ (function () {\n    function RequestWrapper(axiosOptions) {\n        axiosOptions = axiosOptions || {};\n        // override several axios defaults\n        // axios sets the default Content-Type for `post`, `put`, and `patch` operations\n        // to 'application/x-www-form-urlencoded'. This causes problems, so overriding the\n        // defaults here\n        var axiosConfig = {\n            maxContentLength: Infinity,\n            headers: {\n                post: {\n                    'Content-Type': 'application/json'\n                },\n                put: {\n                    'Content-Type': 'application/json'\n                },\n                patch: {\n                    'Content-Type': 'application/json'\n                },\n            }\n        };\n        // merge axios config into default\n        extend(true, axiosConfig, axiosOptions);\n        // if the user explicitly sets `disableSslVerification` to true,\n        // `rejectUnauthorized` must be set to false in the https agent\n        if (axiosOptions.disableSslVerification === true) {\n            // the user may have already provided a custom agent. if so, update it\n            if (axiosConfig.httpsAgent) {\n                // check for presence of `options` field for \"type safety\"\n                if (axiosConfig.httpsAgent.options) {\n                    axiosConfig.httpsAgent.options.rejectUnauthorized = false;\n                }\n            }\n            else {\n                // if no agent is present, create a new one\n                axiosConfig.httpsAgent = new https.Agent({\n                    rejectUnauthorized: false,\n                });\n            }\n        }\n        this.axiosInstance = axios_1.default.create(axiosConfig);\n        // if a cookie jar is provided, wrap the axios instance and update defaults\n        if (axiosOptions.jar) {\n            axios_cookiejar_support_1.default(this.axiosInstance);\n            this.axiosInstance.defaults.withCredentials = true;\n            this.axiosInstance.defaults.jar = axiosOptions.jar;\n        }\n        // set debug interceptors\n        if (process.env.NODE_DEBUG === 'axios' || process.env.DEBUG) {\n            this.axiosInstance.interceptors.request.use(function (config) {\n                logger_1.default.debug('Request:');\n                try {\n                    logger_1.default.debug(JSON.stringify(config, null, 2));\n                }\n                catch (_a) {\n                    logger_1.default.error(config);\n                }\n                return config;\n            }, function (error) {\n                logger_1.default.error('Error: ');\n                try {\n                    logger_1.default.error(JSON.stringify(error, null, 2));\n                }\n                catch (_a) {\n                    logger_1.default.error(error);\n                }\n                return Promise.reject(error);\n            });\n            this.axiosInstance.interceptors.response.use(function (response) {\n                logger_1.default.debug('Response:');\n                try {\n                    logger_1.default.debug(JSON.stringify(response, null, 2));\n                }\n                catch (_a) {\n                    logger_1.default.error(response);\n                }\n                return response;\n            }, function (error) {\n                logger_1.default.error('Error: ');\n                try {\n                    logger_1.default.error(JSON.stringify(error, null, 2));\n                }\n                catch (_a) {\n                    logger_1.default.error(error);\n                }\n                return Promise.reject(error);\n            });\n        }\n    }\n    /**\n     * Creates the request.\n     * 1. Merge default options with user provided options\n     * 2. Checks for missing parameters\n     * 3. Encode path and query parameters\n     * 4. Call the api\n     * @private\n     * @returns {ReadableStream|undefined}\n     * @throws {Error}\n     */\n    RequestWrapper.prototype.sendRequest = function (parameters) {\n        var _this = this;\n        var options = extend(true, {}, parameters.defaultOptions, parameters.options);\n        var path = options.path, body = options.body, form = options.form, formData = options.formData, qs = options.qs, method = options.method, serviceUrl = options.serviceUrl;\n        var headers = options.headers, url = options.url;\n        var multipartForm = new FormData();\n        // Form params\n        if (formData) {\n            Object.keys(formData).forEach(function (key) {\n                var values = Array.isArray(formData[key]) ? formData[key] : [formData[key]];\n                // Skip keys with undefined/null values or empty object value\n                values.filter(function (v) { return v != null && !helper_1.isEmptyObject(v); }).forEach(function (value) {\n                    // Special case of empty file object\n                    if (value.hasOwnProperty('contentType') && !value.hasOwnProperty('data')) {\n                        return;\n                    }\n                    if (helper_1.isFileWithMetadata(value)) {\n                        var fileObj = helper_1.buildRequestFileObject(value);\n                        multipartForm.append(key, fileObj.value, fileObj.options);\n                    }\n                    else {\n                        if (typeof value === 'object' && !helper_1.isFileData(value)) {\n                            value = JSON.stringify(value);\n                        }\n                        multipartForm.append(key, value);\n                    }\n                });\n            });\n        }\n        // Path params\n        url = parsePath(url, path);\n        // Headers\n        options.headers = Object.assign({}, options.headers);\n        // Convert array-valued query params to strings\n        if (qs && Object.keys(qs).length > 0) {\n            Object.keys(qs).forEach(function (key) { return Array.isArray(qs[key]) && (qs[key] = qs[key].join(',')); });\n        }\n        // Add service default endpoint if options.url start with /\n        if (url && url.charAt(0) === '/') {\n            url = helper_1.stripTrailingSlash(serviceUrl) + url;\n        }\n        url = helper_1.stripTrailingSlash(url);\n        var data = body;\n        if (form) {\n            data = querystring.stringify(form);\n            headers['Content-type'] = 'application/x-www-form-urlencoded';\n        }\n        if (formData) {\n            data = multipartForm;\n            // form-data generates headers that MUST be included or the request will fail\n            headers = extend(true, {}, headers, multipartForm.getHeaders());\n        }\n        // TEMPORARY: Disabling gzipping due to bug in axios until fix is released:\n        // https://github.com/axios/axios/pull/1129\n        // accept gzip encoded responses if Accept-Encoding is not already set\n        // headers['Accept-Encoding'] = headers['Accept-Encoding'] || 'gzip';\n        var requestParams = {\n            url: url,\n            method: method,\n            headers: headers,\n            params: qs,\n            data: data,\n            responseType: options.responseType || 'json',\n            paramsSerializer: function (params) {\n                return querystring.stringify(params);\n            },\n        };\n        return this.axiosInstance(requestParams).then(function (res) {\n            // sometimes error responses will still trigger the `then` block - escape that behavior here\n            if (!res) {\n                return;\n            }\n            ;\n            // these objects contain circular json structures and are not always relevant to the user\n            // if the user wants them, they can be accessed through the debug properties\n            delete res.config;\n            delete res.request;\n            // the other sdks use the interface `result` for the body\n            res.result = res.data;\n            delete res.data;\n            // return another promise that resolves with 'res' to be handled in generated code\n            return res;\n        }, function (err) {\n            // return another promise that rejects with 'err' to be handled in generated code\n            throw _this.formatError(err);\n        });\n    };\n    /**\n     * Format error returned by axios\n     * @param  {object} the object returned by axios via rejection\n     * @private\n     * @returns {Error}\n     */\n    RequestWrapper.prototype.formatError = function (axiosError) {\n        // return an actual error object,\n        // but make it flexible so we can add properties like 'body'\n        var error = new Error();\n        // axios specific handling\n        // this branch is for an error received from the service\n        if (axiosError.response) {\n            axiosError = axiosError.response;\n            // The request was made and the server responded with a status code\n            // that falls out of the range of 2xx\n            delete axiosError.config;\n            delete axiosError.request;\n            error.statusText = axiosError.statusText;\n            error.name = axiosError.statusText; // ** deprecated **\n            error.status = axiosError.status;\n            error.code = axiosError.status; // ** deprecated **\n            error.message = parseServiceErrorMessage(axiosError.data) || axiosError.statusText;\n            // some services bury the useful error message within 'data'\n            // adding it to the error under the key 'body' as a string or object\n            var errorBody = void 0;\n            try {\n                // try/catch to handle objects with circular references\n                errorBody = JSON.stringify(axiosError.data);\n            }\n            catch (e) {\n                // ignore the error, use the object, and tack on a warning\n                errorBody = axiosError.data;\n                errorBody.warning = 'Body contains circular reference';\n                logger_1.default.error(\"Failed to stringify axiosError: \" + e);\n            }\n            error.body = errorBody;\n            // attach headers to error object\n            error.headers = axiosError.headers;\n            // print a more descriptive error message for auth issues\n            if (isAuthenticationError(axiosError)) {\n                error.message = 'Access is denied due to invalid credentials.';\n            }\n        }\n        else if (axiosError.request) {\n            // The request was made but no response was received\n            // `error.request` is an instance of XMLHttpRequest in the browser and an instance of\n            // http.ClientRequest in node.js\n            error.message = axiosError.message;\n            error.statusText = axiosError.code;\n            error.body = 'Response not received - no connection was made to the service.';\n            // when a request to a private cloud instance has an ssl problem, it never connects and follows this branch of the error handling\n            if (isSelfSignedCertificateError(axiosError)) {\n                error.message = \"The connection failed because the SSL certificate is not valid. \" +\n                    \"To use a self-signed certificate, set the `disableSslVerification` parameter in the constructor options.\";\n            }\n        }\n        else {\n            // Something happened in setting up the request that triggered an Error\n            error.message = axiosError.message;\n        }\n        return error;\n    };\n    return RequestWrapper;\n}());\nexports.RequestWrapper = RequestWrapper;\n/**\n * @private\n * @param {string} path\n * @param {Object} params\n * @returns {string}\n */\nfunction parsePath(path, params) {\n    if (!path || !params) {\n        return path;\n    }\n    return Object.keys(params).reduce(function (parsedPath, param) {\n        var value = encodeURIComponent(params[param]);\n        return parsedPath.replace(new RegExp(\"{\" + param + \"}\"), value);\n    }, path);\n}\n/**\n * Determine if the error is due to bad credentials\n * @private\n * @param {Object} error - error object returned from axios\n * @returns {boolean} true if error is due to authentication\n */\nfunction isAuthenticationError(error) {\n    var isAuthErr = false;\n    var code = error.status || null;\n    var body = error.data || {};\n    // handle specific error from iam service, should be relevant across platforms\n    var isIamServiceError = body.context &&\n        body.context.url &&\n        body.context.url.indexOf('iam') > -1;\n    if (code === 401 || code === 403 || isIamServiceError) {\n        isAuthErr = true;\n    }\n    return isAuthErr;\n}\n/**\n * Determine if the error is due to a bad self signed certificate\n * @private\n * @param {Object} error - error object returned from axios\n * @returns {boolean} true if error is due to an SSL error\n */\nfunction isSelfSignedCertificateError(error) {\n    var result = false;\n    var sslCode = 'DEPTH_ZERO_SELF_SIGNED_CERT';\n    var sslMessage = 'self signed certificate';\n    var hasSslCode = error.code === sslCode;\n    var hasSslMessage = hasStringProperty(error, 'message') && error.message.includes(sslMessage);\n    if (hasSslCode || hasSslMessage) {\n        result = true;\n    }\n    return result;\n}\n/**\n * Return true if object has a specified property that is a string\n * @private\n * @param {Object} obj - object to look for property in\n * @param {string} property - name of the property to look for\n * @returns {boolean} true if property exists and is string\n */\nfunction hasStringProperty(obj, property) {\n    return Boolean(obj[property] && typeof obj[property] === 'string');\n}\n/**\n * Look for service error message in common places, by priority\n * first look in `errors[0].message`, then in `error`, then in\n * `message`, then in `errorMessage`\n * @private\n * @param {Object} response - error response body received from service\n * @returns {string | undefined} the error message if is was found, undefined otherwise\n */\nfunction parseServiceErrorMessage(response) {\n    var message;\n    if (Array.isArray(response.errors) && response.errors.length > 0 && hasStringProperty(response.errors[0], 'message')) {\n        message = response.errors[0].message;\n    }\n    else if (hasStringProperty(response, 'error')) {\n        message = response.error;\n    }\n    else if (hasStringProperty(response, 'message')) {\n        message = response.message;\n    }\n    else if (hasStringProperty(response, 'errorMessage')) {\n        message = response.errorMessage;\n    }\n    logger_1.default.info(\"Parsing service error message: \" + message);\n    return message;\n}\n"]},"metadata":{},"sourceType":"script"}