{"ast":null,"code":"\"use strict\";\n/**\n * Copyright 2014 IBM Corp. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.BaseService = void 0;\n\nvar auth_1 = require(\"../auth\");\n\nvar helper_1 = require(\"./helper\");\n\nvar logger_1 = require(\"./logger\");\n\nvar request_wrapper_1 = require(\"./request-wrapper\");\n/**\n * Common functionality shared by generated service classes.\n *\n * The base service authenticates requests via its authenticator, and sends\n * them to the service endpoint.\n */\n\n\nvar BaseService =\n/** @class */\nfunction () {\n  /**\n   * Configuration values for a service.\n   * @param {Authenticator} userOptions.authenticator Object used to authenticate requests to the service.\n   * @param {string} [userOptions.serviceUrl] The base url to use when contacting the service.\n   *   The base url may differ between IBM Cloud regions.\n   * @param {object<string, string>} [userOptions.headers] Default headers that shall be\n   *   included with every request to the service.\n   * @param {string} [userOptions.version] The API version date to use with the service,\n   *   in \"YYYY-MM-DD\" format.\n   * @param {boolean} [userOptions.disableSslVerification] A flag that indicates\n   *   whether verification of the token server's SSL certificate should be\n   *   disabled or not.\n   */\n  function BaseService(userOptions) {\n    if (!(this instanceof BaseService)) {\n      var err = 'the \"new\" keyword is required to create service instances';\n      logger_1.default.error(\"Error creating an instance of BaseService: \" + err);\n      throw new Error(err);\n    }\n\n    var _options = {};\n    var options = Object.assign({}, userOptions); // for compatibility\n\n    if (options.url && !options.serviceUrl) {\n      options.serviceUrl = options.url;\n    }\n\n    if (options.serviceUrl) {\n      _options.serviceUrl = helper_1.stripTrailingSlash(options.serviceUrl);\n    } // check serviceUrl for common user errors\n\n\n    var credentialProblems = auth_1.checkCredentials(options, ['serviceUrl']);\n\n    if (credentialProblems) {\n      logger_1.default.error(credentialProblems.message);\n      throw credentialProblems;\n    } // if disableSslVerification is not explicity set to the boolean value `true`,\n    // force it to be false\n\n\n    if (options.disableSslVerification !== true) {\n      options.disableSslVerification = false;\n    }\n\n    var serviceClass = this.constructor;\n    this.baseOptions = Object.assign({\n      qs: {},\n      serviceUrl: serviceClass.DEFAULT_SERVICE_URL\n    }, options, _options);\n    this.requestWrapperInstance = new request_wrapper_1.RequestWrapper(this.baseOptions); // enforce that an authenticator is set\n\n    if (!options.authenticator) {\n      throw new Error('Authenticator must be set.');\n    }\n\n    this.authenticator = options.authenticator;\n  }\n  /**\n   * Get the instance of the authenticator set on the service.\n   *\n   * @returns {Authenticator}\n   */\n\n\n  BaseService.prototype.getAuthenticator = function () {\n    return this.authenticator;\n  };\n  /**\n   * Set the service URL to send requests to.\n   *\n   * @param {string} url The base URL for the service.\n   */\n\n\n  BaseService.prototype.setServiceUrl = function (url) {\n    if (url) {\n      this.baseOptions.serviceUrl = helper_1.stripTrailingSlash(url);\n    }\n  };\n  /**\n   * Configure the service using external configuration\n   *\n   * @param {string} serviceName The name of the service. Will be used to read from external\n   * configuration.\n   */\n\n\n  BaseService.prototype.configureService = function (serviceName) {\n    if (!serviceName) {\n      var err = 'Error configuring service. Service name is required.';\n      logger_1.default.error(err);\n      throw new Error(err);\n    }\n\n    Object.assign(this.baseOptions, this.readOptionsFromExternalConfig(serviceName)); // overwrite the requestWrapperInstance with the new base options if applicable\n\n    this.requestWrapperInstance = new request_wrapper_1.RequestWrapper(this.baseOptions);\n  };\n  /**\n   * Wrapper around `sendRequest` that enforces the request will be authenticated.\n   *\n   * @param {object} parameters Service request options passed in by user.\n   * @param {string} parameters.options.method The http method.\n   * @param {string} parameters.options.url The path portion of the URL to be appended to the serviceUrl.\n   * @param {object} [parameters.options.path] The path parameters to be inserted into the URL.\n   * @param {object} [parameters.options.qs] The querystring to be included in the URL.\n   * @param {object} [parameters.options.body] The data to be sent as the request body.\n   * @param {object} [parameters.options.form] An object containing the key/value pairs for a www-form-urlencoded request.\n   * @param {object} [parameters.options.formData] An object containing the contents for a multipart/form-data request\n   * The following processing is performed on formData values:\n   * - string: no special processing -- the value is sent as is\n   * - object: the value is converted to a JSON string before insertion into the form body\n   * - NodeJS.ReadableStream|Buffer|FileWithMetadata: sent as a file, with any associated metadata\n   * - array: each element of the array is sent as a separate form part using any special processing as described above\n   * @param {object} parameters.defaultOptions\n   * @param {string} parameters.defaultOptions.serviceUrl The base URL of the service.\n   * @param {OutgoingHttpHeaders} parameters.defaultOptions.headers Additional headers to be passed on the request.\n   * @returns {Promise<any>}\n   */\n\n\n  BaseService.prototype.createRequest = function (parameters) {\n    var _this = this; // validate serviceUrl parameter has been set\n\n\n    var serviceUrl = parameters.defaultOptions && parameters.defaultOptions.serviceUrl;\n\n    if (!serviceUrl || typeof serviceUrl !== 'string') {\n      return Promise.reject(new Error('The service URL is required'));\n    }\n\n    return this.authenticator.authenticate(parameters.defaultOptions).then(function () {\n      // resolve() handles rejection as well, so resolving the result of sendRequest should allow for proper handling later\n      return _this.requestWrapperInstance.sendRequest(parameters);\n    });\n  };\n\n  BaseService.prototype.readOptionsFromExternalConfig = function (serviceName) {\n    var results = {};\n    var properties = auth_1.readExternalSources(serviceName);\n\n    if (properties !== null) {\n      // the user can define two client-level variables in the credentials file: url and disableSsl\n      var url = properties.url,\n          disableSsl = properties.disableSsl;\n\n      if (url) {\n        results.serviceUrl = helper_1.stripTrailingSlash(url);\n      }\n\n      if (disableSsl === true) {\n        results.disableSslVerification = disableSsl;\n      }\n    }\n\n    return results;\n  };\n\n  return BaseService;\n}();\n\nexports.BaseService = BaseService;","map":{"version":3,"sources":["D:/2.Programavimas/Projects/JAVA/IdeaProject/IBMchallenge/node_modules/ibm-cloud-sdk-core/lib/base-service.js"],"names":["Object","defineProperty","exports","value","BaseService","auth_1","require","helper_1","logger_1","request_wrapper_1","userOptions","err","default","error","Error","_options","options","assign","url","serviceUrl","stripTrailingSlash","credentialProblems","checkCredentials","message","disableSslVerification","serviceClass","constructor","baseOptions","qs","DEFAULT_SERVICE_URL","requestWrapperInstance","RequestWrapper","authenticator","prototype","getAuthenticator","setServiceUrl","configureService","serviceName","readOptionsFromExternalConfig","createRequest","parameters","_this","defaultOptions","Promise","reject","authenticate","then","sendRequest","results","properties","readExternalSources","disableSsl"],"mappings":"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","sourcesContent":["\"use strict\";\n/**\n * Copyright 2014 IBM Corp. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.BaseService = void 0;\nvar auth_1 = require(\"../auth\");\nvar helper_1 = require(\"./helper\");\nvar logger_1 = require(\"./logger\");\nvar request_wrapper_1 = require(\"./request-wrapper\");\n/**\n * Common functionality shared by generated service classes.\n *\n * The base service authenticates requests via its authenticator, and sends\n * them to the service endpoint.\n */\nvar BaseService = /** @class */ (function () {\n    /**\n     * Configuration values for a service.\n     * @param {Authenticator} userOptions.authenticator Object used to authenticate requests to the service.\n     * @param {string} [userOptions.serviceUrl] The base url to use when contacting the service.\n     *   The base url may differ between IBM Cloud regions.\n     * @param {object<string, string>} [userOptions.headers] Default headers that shall be\n     *   included with every request to the service.\n     * @param {string} [userOptions.version] The API version date to use with the service,\n     *   in \"YYYY-MM-DD\" format.\n     * @param {boolean} [userOptions.disableSslVerification] A flag that indicates\n     *   whether verification of the token server's SSL certificate should be\n     *   disabled or not.\n     */\n    function BaseService(userOptions) {\n        if (!(this instanceof BaseService)) {\n            var err = 'the \"new\" keyword is required to create service instances';\n            logger_1.default.error(\"Error creating an instance of BaseService: \" + err);\n            throw new Error(err);\n        }\n        var _options = {};\n        var options = Object.assign({}, userOptions);\n        // for compatibility\n        if (options.url && !options.serviceUrl) {\n            options.serviceUrl = options.url;\n        }\n        if (options.serviceUrl) {\n            _options.serviceUrl = helper_1.stripTrailingSlash(options.serviceUrl);\n        }\n        // check serviceUrl for common user errors\n        var credentialProblems = auth_1.checkCredentials(options, ['serviceUrl']);\n        if (credentialProblems) {\n            logger_1.default.error(credentialProblems.message);\n            throw credentialProblems;\n        }\n        // if disableSslVerification is not explicity set to the boolean value `true`,\n        // force it to be false\n        if (options.disableSslVerification !== true) {\n            options.disableSslVerification = false;\n        }\n        var serviceClass = this.constructor;\n        this.baseOptions = Object.assign({ qs: {}, serviceUrl: serviceClass.DEFAULT_SERVICE_URL }, options, _options);\n        this.requestWrapperInstance = new request_wrapper_1.RequestWrapper(this.baseOptions);\n        // enforce that an authenticator is set\n        if (!options.authenticator) {\n            throw new Error('Authenticator must be set.');\n        }\n        this.authenticator = options.authenticator;\n    }\n    /**\n     * Get the instance of the authenticator set on the service.\n     *\n     * @returns {Authenticator}\n     */\n    BaseService.prototype.getAuthenticator = function () {\n        return this.authenticator;\n    };\n    /**\n     * Set the service URL to send requests to.\n     *\n     * @param {string} url The base URL for the service.\n     */\n    BaseService.prototype.setServiceUrl = function (url) {\n        if (url) {\n            this.baseOptions.serviceUrl = helper_1.stripTrailingSlash(url);\n        }\n    };\n    /**\n     * Configure the service using external configuration\n     *\n     * @param {string} serviceName The name of the service. Will be used to read from external\n     * configuration.\n     */\n    BaseService.prototype.configureService = function (serviceName) {\n        if (!serviceName) {\n            var err = 'Error configuring service. Service name is required.';\n            logger_1.default.error(err);\n            throw new Error(err);\n        }\n        Object.assign(this.baseOptions, this.readOptionsFromExternalConfig(serviceName));\n        // overwrite the requestWrapperInstance with the new base options if applicable\n        this.requestWrapperInstance = new request_wrapper_1.RequestWrapper(this.baseOptions);\n    };\n    /**\n     * Wrapper around `sendRequest` that enforces the request will be authenticated.\n     *\n     * @param {object} parameters Service request options passed in by user.\n     * @param {string} parameters.options.method The http method.\n     * @param {string} parameters.options.url The path portion of the URL to be appended to the serviceUrl.\n     * @param {object} [parameters.options.path] The path parameters to be inserted into the URL.\n     * @param {object} [parameters.options.qs] The querystring to be included in the URL.\n     * @param {object} [parameters.options.body] The data to be sent as the request body.\n     * @param {object} [parameters.options.form] An object containing the key/value pairs for a www-form-urlencoded request.\n     * @param {object} [parameters.options.formData] An object containing the contents for a multipart/form-data request\n     * The following processing is performed on formData values:\n     * - string: no special processing -- the value is sent as is\n     * - object: the value is converted to a JSON string before insertion into the form body\n     * - NodeJS.ReadableStream|Buffer|FileWithMetadata: sent as a file, with any associated metadata\n     * - array: each element of the array is sent as a separate form part using any special processing as described above\n     * @param {object} parameters.defaultOptions\n     * @param {string} parameters.defaultOptions.serviceUrl The base URL of the service.\n     * @param {OutgoingHttpHeaders} parameters.defaultOptions.headers Additional headers to be passed on the request.\n     * @returns {Promise<any>}\n     */\n    BaseService.prototype.createRequest = function (parameters) {\n        var _this = this;\n        // validate serviceUrl parameter has been set\n        var serviceUrl = parameters.defaultOptions && parameters.defaultOptions.serviceUrl;\n        if (!serviceUrl || typeof serviceUrl !== 'string') {\n            return Promise.reject(new Error('The service URL is required'));\n        }\n        return this.authenticator.authenticate(parameters.defaultOptions).then(function () {\n            // resolve() handles rejection as well, so resolving the result of sendRequest should allow for proper handling later\n            return _this.requestWrapperInstance.sendRequest(parameters);\n        });\n    };\n    BaseService.prototype.readOptionsFromExternalConfig = function (serviceName) {\n        var results = {};\n        var properties = auth_1.readExternalSources(serviceName);\n        if (properties !== null) {\n            // the user can define two client-level variables in the credentials file: url and disableSsl\n            var url = properties.url, disableSsl = properties.disableSsl;\n            if (url) {\n                results.serviceUrl = helper_1.stripTrailingSlash(url);\n            }\n            if (disableSsl === true) {\n                results.disableSslVerification = disableSsl;\n            }\n        }\n        return results;\n    };\n    return BaseService;\n}());\nexports.BaseService = BaseService;\n"]},"metadata":{},"sourceType":"script"}