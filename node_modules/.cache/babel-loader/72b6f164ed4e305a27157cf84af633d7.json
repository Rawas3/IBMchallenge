{"ast":null,"code":"\"use strict\";\n/**\n * Copyright 2019 IBM Corp. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getCurrentTime = exports.validateInput = exports.checkCredentials = exports.computeBasicAuthHeader = void 0;\n\nvar helper_1 = require(\"../../lib/helper\");\n/**\n * Compute and return a Basic Authorization header from a username and password.\n *\n * @param {string} username - The username or client id\n * @param {string} password - The password or client secret\n * @returns {string} - A Basic Auth header with format \"Basic <encoded-credentials>\"\n */\n\n\nfunction computeBasicAuthHeader(username, password) {\n  var encodedCreds = Buffer.from(username + \":\" + password).toString('base64');\n  return \"Basic \" + encodedCreds;\n}\n\nexports.computeBasicAuthHeader = computeBasicAuthHeader; // returns true if the string has a curly bracket or quote as the first or last character\n// these are common user-issues that we should handle before they get a network error\n\nfunction badCharAtAnEnd(value) {\n  return value.startsWith('{') || value.startsWith('\"') || value.endsWith('}') || value.endsWith('\"');\n}\n/**\n * Checks credentials for common user mistakes of copying {, }, or \" characters from the documentation\n *\n * @param {object} obj - The options object holding credentials\n * @param {string[]} credsToCheck - An array containing the keys of the credentials to check for problems\n * @returns {string | null} - Returns a string with the error message if there were problems, null if not\n */\n\n\nfunction checkCredentials(obj, credsToCheck) {\n  var errorMessage = '';\n  credsToCheck.forEach(function (cred) {\n    if (obj[cred] && badCharAtAnEnd(obj[cred])) {\n      errorMessage += \"The \" + cred + \" shouldn't start or end with curly brackets or quotes. Be sure to remove any {, }, or \\\"\";\n    }\n  });\n\n  if (errorMessage.length) {\n    errorMessage += 'Revise these credentials - they should not start or end with curly brackets or quotes.';\n    return new Error(errorMessage);\n  } else {\n    return null;\n  }\n}\n\nexports.checkCredentials = checkCredentials;\n/**\n * @param {object} options - A configuration options object.\n * @param {string[]} requiredOptions - The list of properties that must be specified.\n */\n\nfunction validateInput(options, requiredOptions) {\n  // check for required params\n  var missingParamsError = helper_1.getMissingParams(options, requiredOptions);\n\n  if (missingParamsError) {\n    throw missingParamsError;\n  } // check certain credentials for common user errors: username, password, and apikey\n  // note: will only apply to certain authenticators\n\n\n  var credsToCheck = ['username', 'password', 'apikey'];\n  var credentialProblems = checkCredentials(options, credsToCheck);\n\n  if (credentialProblems) {\n    throw credentialProblems;\n  }\n}\n\nexports.validateInput = validateInput;\n/**\n * Get the current time\n *\n * @returns {number} - Returns the current time in seconds.\n */\n\nfunction getCurrentTime() {\n  return Math.floor(Date.now() / 1000);\n}\n\nexports.getCurrentTime = getCurrentTime;","map":{"version":3,"sources":["D:/2.Programavimas/Projects/JAVA/IdeaProject/IBMchallenge/node_modules/ibm-cloud-sdk-core/auth/utils/helpers.js"],"names":["Object","defineProperty","exports","value","getCurrentTime","validateInput","checkCredentials","computeBasicAuthHeader","helper_1","require","username","password","encodedCreds","Buffer","from","toString","badCharAtAnEnd","startsWith","endsWith","obj","credsToCheck","errorMessage","forEach","cred","length","Error","options","requiredOptions","missingParamsError","getMissingParams","credentialProblems","Math","floor","Date","now"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,cAAR,GAAyBF,OAAO,CAACG,aAAR,GAAwBH,OAAO,CAACI,gBAAR,GAA2BJ,OAAO,CAACK,sBAAR,GAAiC,KAAK,CAAlH;;AACA,IAAIC,QAAQ,GAAGC,OAAO,CAAC,kBAAD,CAAtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASF,sBAAT,CAAgCG,QAAhC,EAA0CC,QAA1C,EAAoD;AAChD,MAAIC,YAAY,GAAGC,MAAM,CAACC,IAAP,CAAYJ,QAAQ,GAAG,GAAX,GAAiBC,QAA7B,EAAuCI,QAAvC,CAAgD,QAAhD,CAAnB;AACA,SAAO,WAAWH,YAAlB;AACH;;AACDV,OAAO,CAACK,sBAAR,GAAiCA,sBAAjC,C,CACA;AACA;;AACA,SAASS,cAAT,CAAwBb,KAAxB,EAA+B;AAC3B,SAAOA,KAAK,CAACc,UAAN,CAAiB,GAAjB,KAAyBd,KAAK,CAACc,UAAN,CAAiB,GAAjB,CAAzB,IAAkDd,KAAK,CAACe,QAAN,CAAe,GAAf,CAAlD,IAAyEf,KAAK,CAACe,QAAN,CAAe,GAAf,CAAhF;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASZ,gBAAT,CAA0Ba,GAA1B,EAA+BC,YAA/B,EAA6C;AACzC,MAAIC,YAAY,GAAG,EAAnB;AACAD,EAAAA,YAAY,CAACE,OAAb,CAAqB,UAAUC,IAAV,EAAgB;AACjC,QAAIJ,GAAG,CAACI,IAAD,CAAH,IAAaP,cAAc,CAACG,GAAG,CAACI,IAAD,CAAJ,CAA/B,EAA4C;AACxCF,MAAAA,YAAY,IAAI,SAASE,IAAT,GAAgB,0FAAhC;AACH;AACJ,GAJD;;AAKA,MAAIF,YAAY,CAACG,MAAjB,EAAyB;AACrBH,IAAAA,YAAY,IAAI,wFAAhB;AACA,WAAO,IAAII,KAAJ,CAAUJ,YAAV,CAAP;AACH,GAHD,MAIK;AACD,WAAO,IAAP;AACH;AACJ;;AACDnB,OAAO,CAACI,gBAAR,GAA2BA,gBAA3B;AACA;AACA;AACA;AACA;;AACA,SAASD,aAAT,CAAuBqB,OAAvB,EAAgCC,eAAhC,EAAiD;AAC7C;AACA,MAAIC,kBAAkB,GAAGpB,QAAQ,CAACqB,gBAAT,CAA0BH,OAA1B,EAAmCC,eAAnC,CAAzB;;AACA,MAAIC,kBAAJ,EAAwB;AACpB,UAAMA,kBAAN;AACH,GAL4C,CAM7C;AACA;;;AACA,MAAIR,YAAY,GAAG,CAAC,UAAD,EAAa,UAAb,EAAyB,QAAzB,CAAnB;AACA,MAAIU,kBAAkB,GAAGxB,gBAAgB,CAACoB,OAAD,EAAUN,YAAV,CAAzC;;AACA,MAAIU,kBAAJ,EAAwB;AACpB,UAAMA,kBAAN;AACH;AACJ;;AACD5B,OAAO,CAACG,aAAR,GAAwBA,aAAxB;AACA;AACA;AACA;AACA;AACA;;AACA,SAASD,cAAT,GAA0B;AACtB,SAAO2B,IAAI,CAACC,KAAL,CAAWC,IAAI,CAACC,GAAL,KAAa,IAAxB,CAAP;AACH;;AACDhC,OAAO,CAACE,cAAR,GAAyBA,cAAzB","sourcesContent":["\"use strict\";\n/**\n * Copyright 2019 IBM Corp. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getCurrentTime = exports.validateInput = exports.checkCredentials = exports.computeBasicAuthHeader = void 0;\nvar helper_1 = require(\"../../lib/helper\");\n/**\n * Compute and return a Basic Authorization header from a username and password.\n *\n * @param {string} username - The username or client id\n * @param {string} password - The password or client secret\n * @returns {string} - A Basic Auth header with format \"Basic <encoded-credentials>\"\n */\nfunction computeBasicAuthHeader(username, password) {\n    var encodedCreds = Buffer.from(username + \":\" + password).toString('base64');\n    return \"Basic \" + encodedCreds;\n}\nexports.computeBasicAuthHeader = computeBasicAuthHeader;\n// returns true if the string has a curly bracket or quote as the first or last character\n// these are common user-issues that we should handle before they get a network error\nfunction badCharAtAnEnd(value) {\n    return value.startsWith('{') || value.startsWith('\"') || value.endsWith('}') || value.endsWith('\"');\n}\n/**\n * Checks credentials for common user mistakes of copying {, }, or \" characters from the documentation\n *\n * @param {object} obj - The options object holding credentials\n * @param {string[]} credsToCheck - An array containing the keys of the credentials to check for problems\n * @returns {string | null} - Returns a string with the error message if there were problems, null if not\n */\nfunction checkCredentials(obj, credsToCheck) {\n    var errorMessage = '';\n    credsToCheck.forEach(function (cred) {\n        if (obj[cred] && badCharAtAnEnd(obj[cred])) {\n            errorMessage += \"The \" + cred + \" shouldn't start or end with curly brackets or quotes. Be sure to remove any {, }, or \\\"\";\n        }\n    });\n    if (errorMessage.length) {\n        errorMessage += 'Revise these credentials - they should not start or end with curly brackets or quotes.';\n        return new Error(errorMessage);\n    }\n    else {\n        return null;\n    }\n}\nexports.checkCredentials = checkCredentials;\n/**\n * @param {object} options - A configuration options object.\n * @param {string[]} requiredOptions - The list of properties that must be specified.\n */\nfunction validateInput(options, requiredOptions) {\n    // check for required params\n    var missingParamsError = helper_1.getMissingParams(options, requiredOptions);\n    if (missingParamsError) {\n        throw missingParamsError;\n    }\n    // check certain credentials for common user errors: username, password, and apikey\n    // note: will only apply to certain authenticators\n    var credsToCheck = ['username', 'password', 'apikey'];\n    var credentialProblems = checkCredentials(options, credsToCheck);\n    if (credentialProblems) {\n        throw credentialProblems;\n    }\n}\nexports.validateInput = validateInput;\n/**\n * Get the current time\n *\n * @returns {number} - Returns the current time in seconds.\n */\nfunction getCurrentTime() {\n    return Math.floor(Date.now() / 1000);\n}\nexports.getCurrentTime = getCurrentTime;\n"]},"metadata":{},"sourceType":"script"}