{"ast":null,"code":"\"use strict\";\n/**\n * Copyright 2019 IBM Corp. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.readExternalSources = void 0;\n\nvar camelcase = require(\"camelcase\");\n\nvar isEmpty = require(\"lodash.isempty\");\n\nvar logger_1 = require(\"../../lib/logger\");\n\nvar read_credentials_file_1 = require(\"./read-credentials-file\");\n/**\n * Read properties stored in external sources like Environment Variables,\n * the credentials file, VCAP services, etc. and return them as an\n * object. The keys of this object will have the service name prefix removed\n * and will be converted to lower camel case.\n *\n * Only one source will be used at a time.\n * @param {string} serviceName The service name prefix.\n */\n\n\nfunction readExternalSources(serviceName) {\n  if (!serviceName) {\n    throw new Error('Service name is required.');\n  }\n\n  return getProperties(serviceName);\n}\n\nexports.readExternalSources = readExternalSources;\n\nfunction getProperties(serviceName) {\n  // Try to get properties from external sources, with the following priority:\n  // 1. Credentials file (ibm-credentials.env)\n  // 2. Environment variables\n  // 3. VCAP Services (Cloud Foundry)\n  // only get properties from one source, return null if none found\n  var properties = null;\n  properties = filterPropertiesByServiceName(read_credentials_file_1.readCredentialsFile(), serviceName);\n\n  if (isEmpty(properties)) {\n    properties = filterPropertiesByServiceName(process.env, serviceName);\n  }\n\n  if (isEmpty(properties)) {\n    properties = getPropertiesFromVCAP(serviceName);\n  }\n\n  return properties;\n}\n/**\n * Pulls credentials from env properties\n *\n * Property checked is uppercase service.name suffixed by _USERNAME and _PASSWORD\n *\n * For example, if service.name is speech_to_text,\n * env properties are SPEECH_TO_TEXT_USERNAME and SPEECH_TO_TEXT_PASSWORD\n *\n * @param {object} envObj - the object containing the credentials keyed by environment variables\n * @returns {Credentials}\n */\n\n\nfunction filterPropertiesByServiceName(envObj, serviceName) {\n  var credentials = {};\n  var name = serviceName.toUpperCase().replace(/-/g, '_') + '_'; // append the underscore that must follow the service name\n  // filter out properties that don't begin with the service name\n\n  Object.keys(envObj).forEach(function (key) {\n    if (key.startsWith(name)) {\n      var propName = camelcase(key.substring(name.length)); // remove the name from the front of the string and make camelcase\n\n      credentials[propName] = envObj[key];\n    }\n  }); // all env variables are parsed as strings, convert disable ssl vars to boolean\n\n  if (typeof credentials.disableSsl === 'string') {\n    credentials.disableSsl = credentials.disableSsl === 'true';\n  }\n\n  if (typeof credentials.authDisableSsl === 'string') {\n    credentials.authDisableSsl = credentials.authDisableSsl === 'true';\n  }\n\n  return credentials;\n}\n/**\n * Pulls credentials from VCAP_SERVICES env property that IBM Cloud sets\n *\n * The function will first look for a service entry whose \"name\" field matches\n * the serviceKey value. If found, return its credentials.\n *\n * If no match against the service entry's \"name\" field is found, then find the\n * service list with a key matching the serviceKey value. If found, return the\n * credentials of the first service in the service list.\n */\n\n\nfunction getVCAPCredentialsForService(name) {\n  if (process.env.VCAP_SERVICES) {\n    var services = JSON.parse(process.env.VCAP_SERVICES);\n\n    for (var _i = 0, _a = Object.keys(services); _i < _a.length; _i++) {\n      var serviceName = _a[_i];\n\n      for (var _b = 0, _c = services[serviceName]; _b < _c.length; _b++) {\n        var instance = _c[_b];\n\n        if (instance['name'] === name) {\n          if (instance.hasOwnProperty('credentials')) {\n            return instance.credentials;\n          } else {\n            logger_1.default.debug('no data read from VCAP_SERVICES');\n            return {};\n          }\n        }\n      }\n    }\n\n    for (var _d = 0, _e = Object.keys(services); _d < _e.length; _d++) {\n      var serviceName = _e[_d];\n\n      if (serviceName === name) {\n        if (services[serviceName].length > 0) {\n          if (services[serviceName][0].hasOwnProperty('credentials')) {\n            return services[serviceName][0].credentials;\n          } else {\n            logger_1.default.debug('no data read from VCAP_SERVICES');\n            return {};\n          }\n\n          return services[serviceName][0].credentials || {};\n        } else {\n          logger_1.default.debug('no data read from VCAP_SERVICES');\n          return {};\n        }\n      }\n    }\n  }\n\n  logger_1.default.debug('no data read from VCAP_SERVICES');\n  return {};\n}\n\nfunction getPropertiesFromVCAP(serviceName) {\n  var credentials = getVCAPCredentialsForService(serviceName); // infer authentication type from credentials in a simple manner\n  // iam is used as the default later\n\n  if (credentials.username || credentials.password) {\n    credentials.authType = 'basic';\n  }\n\n  return credentials;\n}","map":{"version":3,"sources":["D:/2.Programavimas/Projects/JAVA/IdeaProject/IBMchallenge/node_modules/ibm-cloud-sdk-core/auth/utils/read-external-sources.js"],"names":["Object","defineProperty","exports","value","readExternalSources","camelcase","require","isEmpty","logger_1","read_credentials_file_1","serviceName","Error","getProperties","properties","filterPropertiesByServiceName","readCredentialsFile","process","env","getPropertiesFromVCAP","envObj","credentials","name","toUpperCase","replace","keys","forEach","key","startsWith","propName","substring","length","disableSsl","authDisableSsl","getVCAPCredentialsForService","VCAP_SERVICES","services","JSON","parse","_i","_a","_b","_c","instance","hasOwnProperty","default","debug","_d","_e","username","password","authType"],"mappings":"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","sourcesContent":["\"use strict\";\n/**\n * Copyright 2019 IBM Corp. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.readExternalSources = void 0;\nvar camelcase = require(\"camelcase\");\nvar isEmpty = require(\"lodash.isempty\");\nvar logger_1 = require(\"../../lib/logger\");\nvar read_credentials_file_1 = require(\"./read-credentials-file\");\n/**\n * Read properties stored in external sources like Environment Variables,\n * the credentials file, VCAP services, etc. and return them as an\n * object. The keys of this object will have the service name prefix removed\n * and will be converted to lower camel case.\n *\n * Only one source will be used at a time.\n * @param {string} serviceName The service name prefix.\n */\nfunction readExternalSources(serviceName) {\n    if (!serviceName) {\n        throw new Error('Service name is required.');\n    }\n    return getProperties(serviceName);\n}\nexports.readExternalSources = readExternalSources;\nfunction getProperties(serviceName) {\n    // Try to get properties from external sources, with the following priority:\n    // 1. Credentials file (ibm-credentials.env)\n    // 2. Environment variables\n    // 3. VCAP Services (Cloud Foundry)\n    // only get properties from one source, return null if none found\n    var properties = null;\n    properties = filterPropertiesByServiceName(read_credentials_file_1.readCredentialsFile(), serviceName);\n    if (isEmpty(properties)) {\n        properties = filterPropertiesByServiceName(process.env, serviceName);\n    }\n    if (isEmpty(properties)) {\n        properties = getPropertiesFromVCAP(serviceName);\n    }\n    return properties;\n}\n/**\n * Pulls credentials from env properties\n *\n * Property checked is uppercase service.name suffixed by _USERNAME and _PASSWORD\n *\n * For example, if service.name is speech_to_text,\n * env properties are SPEECH_TO_TEXT_USERNAME and SPEECH_TO_TEXT_PASSWORD\n *\n * @param {object} envObj - the object containing the credentials keyed by environment variables\n * @returns {Credentials}\n */\nfunction filterPropertiesByServiceName(envObj, serviceName) {\n    var credentials = {};\n    var name = serviceName.toUpperCase().replace(/-/g, '_') + '_'; // append the underscore that must follow the service name\n    // filter out properties that don't begin with the service name\n    Object.keys(envObj).forEach(function (key) {\n        if (key.startsWith(name)) {\n            var propName = camelcase(key.substring(name.length)); // remove the name from the front of the string and make camelcase\n            credentials[propName] = envObj[key];\n        }\n    });\n    // all env variables are parsed as strings, convert disable ssl vars to boolean\n    if (typeof credentials.disableSsl === 'string') {\n        credentials.disableSsl = credentials.disableSsl === 'true';\n    }\n    if (typeof credentials.authDisableSsl === 'string') {\n        credentials.authDisableSsl = credentials.authDisableSsl === 'true';\n    }\n    return credentials;\n}\n/**\n * Pulls credentials from VCAP_SERVICES env property that IBM Cloud sets\n *\n * The function will first look for a service entry whose \"name\" field matches\n * the serviceKey value. If found, return its credentials.\n *\n * If no match against the service entry's \"name\" field is found, then find the\n * service list with a key matching the serviceKey value. If found, return the\n * credentials of the first service in the service list.\n */\nfunction getVCAPCredentialsForService(name) {\n    if (process.env.VCAP_SERVICES) {\n        var services = JSON.parse(process.env.VCAP_SERVICES);\n        for (var _i = 0, _a = Object.keys(services); _i < _a.length; _i++) {\n            var serviceName = _a[_i];\n            for (var _b = 0, _c = services[serviceName]; _b < _c.length; _b++) {\n                var instance = _c[_b];\n                if (instance['name'] === name) {\n                    if (instance.hasOwnProperty('credentials')) {\n                        return instance.credentials;\n                    }\n                    else {\n                        logger_1.default.debug('no data read from VCAP_SERVICES');\n                        return {};\n                    }\n                }\n            }\n        }\n        for (var _d = 0, _e = Object.keys(services); _d < _e.length; _d++) {\n            var serviceName = _e[_d];\n            if (serviceName === name) {\n                if (services[serviceName].length > 0) {\n                    if (services[serviceName][0].hasOwnProperty('credentials')) {\n                        return services[serviceName][0].credentials;\n                    }\n                    else {\n                        logger_1.default.debug('no data read from VCAP_SERVICES');\n                        return {};\n                    }\n                    return services[serviceName][0].credentials || {};\n                }\n                else {\n                    logger_1.default.debug('no data read from VCAP_SERVICES');\n                    return {};\n                }\n            }\n        }\n    }\n    logger_1.default.debug('no data read from VCAP_SERVICES');\n    return {};\n}\nfunction getPropertiesFromVCAP(serviceName) {\n    var credentials = getVCAPCredentialsForService(serviceName);\n    // infer authentication type from credentials in a simple manner\n    // iam is used as the default later\n    if (credentials.username || credentials.password) {\n        credentials.authType = 'basic';\n    }\n    return credentials;\n}\n"]},"metadata":{},"sourceType":"script"}