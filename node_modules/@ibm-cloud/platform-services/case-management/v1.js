"use strict";
/**
 * (C) Copyright IBM Corp. 2021.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
/**
 * IBM OpenAPI SDK Code Generator Version: 99-SNAPSHOT-7b3ab37f-20210215-130941
 */
var extend = require("extend");
var ibm_cloud_sdk_core_1 = require("ibm-cloud-sdk-core");
var common_1 = require("../lib/common");
/**
 * Case management API for creating cases, getting case statuses, adding comments to a case, adding and removing users
 * from a case watchlist, downloading and adding attachments, and more.
 */
var CaseManagementV1 = /** @class */ (function (_super) {
    __extends(CaseManagementV1, _super);
    /**
     * Construct a CaseManagementV1 object.
     *
     * @param {Object} options - Options for the service.
     * @param {string} [options.serviceUrl] - The base url to use when contacting the service. The base url may differ between IBM Cloud regions.
     * @param {OutgoingHttpHeaders} [options.headers] - Default headers that shall be included with every request to the service.
     * @param {Authenticator} options.authenticator - The Authenticator object used to authenticate requests to the service
     * @constructor
     * @returns {CaseManagementV1}
     */
    function CaseManagementV1(options) {
        var _this = this;
        options = options || {};
        _this = _super.call(this, options) || this;
        if (options.serviceUrl) {
            _this.setServiceUrl(options.serviceUrl);
        }
        else {
            _this.setServiceUrl(CaseManagementV1.DEFAULT_SERVICE_URL);
        }
        return _this;
    }
    /*************************
     * Factory method
     ************************/
    /**
     * Constructs an instance of CaseManagementV1 with passed in options and external configuration.
     *
     * @param {UserOptions} [options] - The parameters to send to the service.
     * @param {string} [options.serviceName] - The name of the service to configure
     * @param {Authenticator} [options.authenticator] - The Authenticator object used to authenticate requests to the service
     * @param {string} [options.serviceUrl] - The URL for the service
     * @returns {CaseManagementV1}
     */
    CaseManagementV1.newInstance = function (options) {
        options = options || {};
        if (!options.serviceName) {
            options.serviceName = this.DEFAULT_SERVICE_NAME;
        }
        if (!options.authenticator) {
            options.authenticator = ibm_cloud_sdk_core_1.getAuthenticatorFromEnvironment(options.serviceName);
        }
        var service = new CaseManagementV1(options);
        service.configureService(options.serviceName);
        if (options.serviceUrl) {
            service.setServiceUrl(options.serviceUrl);
        }
        return service;
    };
    /*************************
     * default
     ************************/
    /**
     * Get cases in account.
     *
     * Get cases in the account which is specified by the content of the IAM token.
     *
     * @param {Object} [params] - The parameters to send to the service.
     * @param {number} [params.offset] - Number of cases should be skipped.
     * @param {number} [params.limit] - Number of cases should be returned.
     * @param {string} [params.search] - String that a case might contain.
     * @param {string} [params.sort] - Sort field and direction. If omitted, default to descending of updated date. Prefix
     * "~" signifies sort in descending.
     * @param {string[]} [params.status] - Case status filter.
     * @param {string[]} [params.fields] - Seleted fields of interest instead of the entire case information.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<CaseManagementV1.Response<CaseManagementV1.CaseList>>}
     */
    CaseManagementV1.prototype.getCases = function (params) {
        var _params = __assign({}, params);
        var query = {
            'offset': _params.offset,
            'limit': _params.limit,
            'search': _params.search,
            'sort': _params.sort,
            'status': _params.status,
            'fields': _params.fields,
        };
        var sdkHeaders = common_1.getSdkHeaders(CaseManagementV1.DEFAULT_SERVICE_NAME, 'v1', 'getCases');
        var parameters = {
            options: {
                url: '/cases',
                method: 'GET',
                qs: query,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * Create a case.
     *
     * Create a case in the account.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.type - Case type.
     * @param {string} params.subject - Subject of the case.
     * @param {string} params.description - Detailed description of the issue.
     * @param {number} [params.severity] - Severity of the case. Smaller values mean higher severity.
     * @param {CasePayloadEu} [params.eu] - Specify if the case should be treated as EU regulated. Only one of the
     * following properties is required. Call EU support utility endpoint to determine which property must be specified
     * for your account.
     * @param {Offering} [params.offering] - Offering details.
     * @param {ResourcePayload[]} [params.resources] - List of resources to attach to case. If attaching Classic IaaS
     * devices use type and id fields if Cloud Resource Name (CRN) is unavialable. Otherwise pass the resource CRN. The
     * resource list must be consistent with the value selected for the resource offering.
     * @param {User[]} [params.watchlist] - Array of user IDs to add to the watchlist.
     * @param {string} [params.invoiceNumber] - Invoice number of "Billing and Invoice" case type.
     * @param {boolean} [params.slaCreditRequest] - Flag to indicate if case is for an Service Level Agreement (SLA)
     * credit request.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<CaseManagementV1.Response<CaseManagementV1.Case>>}
     */
    CaseManagementV1.prototype.createCase = function (params) {
        var _params = __assign({}, params);
        var requiredParams = ['type', 'subject', 'description'];
        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var body = {
            'type': _params.type,
            'subject': _params.subject,
            'description': _params.description,
            'severity': _params.severity,
            'eu': _params.eu,
            'offering': _params.offering,
            'resources': _params.resources,
            'watchlist': _params.watchlist,
            'invoice_number': _params.invoiceNumber,
            'sla_credit_request': _params.slaCreditRequest,
        };
        var sdkHeaders = common_1.getSdkHeaders(CaseManagementV1.DEFAULT_SERVICE_NAME, 'v1', 'createCase');
        var parameters = {
            options: {
                url: '/cases',
                method: 'POST',
                body: body,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * Get a case in account.
     *
     * Get a case in the account that is specified by the case number.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.caseNumber - Unique identifier of a case.
     * @param {string[]} [params.fields] - Seleted fields of interest instead of the entire case information.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<CaseManagementV1.Response<CaseManagementV1.Case>>}
     */
    CaseManagementV1.prototype.getCase = function (params) {
        var _params = __assign({}, params);
        var requiredParams = ['caseNumber'];
        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var query = {
            'fields': _params.fields,
        };
        var path = {
            'case_number': _params.caseNumber,
        };
        var sdkHeaders = common_1.getSdkHeaders(CaseManagementV1.DEFAULT_SERVICE_NAME, 'v1', 'getCase');
        var parameters = {
            options: {
                url: '/cases/{case_number}',
                method: 'GET',
                qs: query,
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * Update case status.
     *
     * Mark the case as resolved or unresolved, or accept the provided resolution.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.caseNumber - Unique identifier of a case.
     * @param {StatusPayload} params.statusPayload -
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<CaseManagementV1.Response<CaseManagementV1.Case>>}
     */
    CaseManagementV1.prototype.updateCaseStatus = function (params) {
        var _params = __assign({}, params);
        var requiredParams = ['caseNumber', 'statusPayload'];
        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var body = _params.statusPayload;
        var path = {
            'case_number': _params.caseNumber,
        };
        var sdkHeaders = common_1.getSdkHeaders(CaseManagementV1.DEFAULT_SERVICE_NAME, 'v1', 'updateCaseStatus');
        var parameters = {
            options: {
                url: '/cases/{case_number}/status',
                method: 'PUT',
                body: body,
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * Add comment to case.
     *
     * Add a comment to a case.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.caseNumber - Unique identifier of a case.
     * @param {string} params.comment - Comment to add to the case.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<CaseManagementV1.Response<CaseManagementV1.Comment>>}
     */
    CaseManagementV1.prototype.addComment = function (params) {
        var _params = __assign({}, params);
        var requiredParams = ['caseNumber', 'comment'];
        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var body = {
            'comment': _params.comment,
        };
        var path = {
            'case_number': _params.caseNumber,
        };
        var sdkHeaders = common_1.getSdkHeaders(CaseManagementV1.DEFAULT_SERVICE_NAME, 'v1', 'addComment');
        var parameters = {
            options: {
                url: '/cases/{case_number}/comments',
                method: 'PUT',
                body: body,
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * Add users to watchlist of case.
     *
     * Add users to the watchlist of case. By adding a user to the watchlist of the case, you are granting them read and
     * write permissions, so the user can view the case, receive updates, and make updates to the case. Note that the user
     * must be in the account to be added to the watchlist.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.caseNumber - Unique identifier of a case.
     * @param {User[]} [params.watchlist] - Array of user ID objects.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<CaseManagementV1.Response<CaseManagementV1.WatchlistAddResponse>>}
     */
    CaseManagementV1.prototype.addWatchlist = function (params) {
        var _params = __assign({}, params);
        var requiredParams = ['caseNumber'];
        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var body = {
            'watchlist': _params.watchlist,
        };
        var path = {
            'case_number': _params.caseNumber,
        };
        var sdkHeaders = common_1.getSdkHeaders(CaseManagementV1.DEFAULT_SERVICE_NAME, 'v1', 'addWatchlist');
        var parameters = {
            options: {
                url: '/cases/{case_number}/watchlist',
                method: 'PUT',
                body: body,
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * Remove users from watchlist of case.
     *
     * Remove users from the watchlist of a case.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.caseNumber - Unique identifier of a case.
     * @param {User[]} [params.watchlist] - Array of user ID objects.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<CaseManagementV1.Response<CaseManagementV1.Watchlist>>}
     */
    CaseManagementV1.prototype.removeWatchlist = function (params) {
        var _params = __assign({}, params);
        var requiredParams = ['caseNumber'];
        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var body = {
            'watchlist': _params.watchlist,
        };
        var path = {
            'case_number': _params.caseNumber,
        };
        var sdkHeaders = common_1.getSdkHeaders(CaseManagementV1.DEFAULT_SERVICE_NAME, 'v1', 'removeWatchlist');
        var parameters = {
            options: {
                url: '/cases/{case_number}/watchlist',
                method: 'DELETE',
                body: body,
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * Add a resource to case.
     *
     * Add a resource to case by specifying the Cloud Resource Name (CRN), or id and type if attaching a class iaaS
     * resource.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.caseNumber - Unique identifier of a case.
     * @param {string} [params.crn] - Cloud Resource Name of the resource.
     * @param {string} [params.type] - Only used to attach Classic IaaS devices which have no CRN.
     * @param {number} [params.id] - Only used to attach Classic IaaS devices which have no CRN. Id of Classic IaaS
     * device. This is deprecated in favor of the crn field.
     * @param {string} [params.note] - A note about this resource.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<CaseManagementV1.Response<CaseManagementV1.Resource>>}
     */
    CaseManagementV1.prototype.addResource = function (params) {
        var _params = __assign({}, params);
        var requiredParams = ['caseNumber'];
        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var body = {
            'crn': _params.crn,
            'type': _params.type,
            'id': _params.id,
            'note': _params.note,
        };
        var path = {
            'case_number': _params.caseNumber,
        };
        var sdkHeaders = common_1.getSdkHeaders(CaseManagementV1.DEFAULT_SERVICE_NAME, 'v1', 'addResource');
        var parameters = {
            options: {
                url: '/cases/{case_number}/resources',
                method: 'PUT',
                body: body,
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * Add attachment(s) to case.
     *
     * You can add attachments to a case to provide more information for the support team about the issue that you're
     * experiencing.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.caseNumber - Unique identifier of a case.
     * @param {FileWithMetadata[]} params.file - file of supported types, 8MB in size limit.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<CaseManagementV1.Response<CaseManagementV1.Attachment>>}
     */
    CaseManagementV1.prototype.uploadFile = function (params) {
        var _params = __assign({}, params);
        var requiredParams = ['caseNumber', 'file'];
        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var formData = {
            'file': _params.file,
        };
        var path = {
            'case_number': _params.caseNumber,
        };
        var sdkHeaders = common_1.getSdkHeaders(CaseManagementV1.DEFAULT_SERVICE_NAME, 'v1', 'uploadFile');
        var parameters = {
            options: {
                url: '/cases/{case_number}/attachments',
                method: 'PUT',
                path: path,
                formData: formData,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                    'Content-Type': 'multipart/form-data',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * Download an attachment.
     *
     * Download an attachment from a case.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.caseNumber - Unique identifier of a case.
     * @param {string} params.fileId - Unique identifier of a file.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<CaseManagementV1.Response<NodeJS.ReadableStream|Buffer>>}
     */
    CaseManagementV1.prototype.downloadFile = function (params) {
        var _params = __assign({}, params);
        var requiredParams = ['caseNumber', 'fileId'];
        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var path = {
            'case_number': _params.caseNumber,
            'file_id': _params.fileId,
        };
        var sdkHeaders = common_1.getSdkHeaders(CaseManagementV1.DEFAULT_SERVICE_NAME, 'v1', 'downloadFile');
        var parameters = {
            options: {
                url: '/cases/{case_number}/attachments/{file_id}',
                method: 'GET',
                path: path,
                responseType: 'stream',
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/octet-stream',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * Remove attachment from case.
     *
     * Remove an attachment from a case.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.caseNumber - Unique identifier of a case.
     * @param {string} params.fileId - Unique identifier of a file.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<CaseManagementV1.Response<CaseManagementV1.AttachmentList>>}
     */
    CaseManagementV1.prototype.deleteFile = function (params) {
        var _params = __assign({}, params);
        var requiredParams = ['caseNumber', 'fileId'];
        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var path = {
            'case_number': _params.caseNumber,
            'file_id': _params.fileId,
        };
        var sdkHeaders = common_1.getSdkHeaders(CaseManagementV1.DEFAULT_SERVICE_NAME, 'v1', 'deleteFile');
        var parameters = {
            options: {
                url: '/cases/{case_number}/attachments/{file_id}',
                method: 'DELETE',
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    CaseManagementV1.DEFAULT_SERVICE_URL = 'https://support-center.cloud.ibm.com/case-management/v1';
    CaseManagementV1.DEFAULT_SERVICE_NAME = 'case_management';
    return CaseManagementV1;
}(ibm_cloud_sdk_core_1.BaseService));
/*************************
 * interfaces
 ************************/
(function (CaseManagementV1) {
    /** Constants for the `getCases` operation. */
    var GetCasesConstants;
    (function (GetCasesConstants) {
        /** Case status filter. */
        var Status;
        (function (Status) {
            Status["NEW"] = "new";
            Status["IN_PROGRESS"] = "in_progress";
            Status["WAITING_ON_CLIENT"] = "waiting_on_client";
            Status["RESOLUTION_PROVIDED"] = "resolution_provided";
            Status["RESOLVED"] = "resolved";
            Status["CLOSED"] = "closed";
        })(Status = GetCasesConstants.Status || (GetCasesConstants.Status = {}));
        /** Seleted fields of interest instead of the entire case information. */
        var Fields;
        (function (Fields) {
            Fields["NUMBER"] = "number";
            Fields["SHORT_DESCRIPTION"] = "short_description";
            Fields["DESCRIPTION"] = "description";
            Fields["CREATED_AT"] = "created_at";
            Fields["CREATED_BY"] = "created_by";
            Fields["UPDATED_AT"] = "updated_at";
            Fields["UPDATED_BY"] = "updated_by";
            Fields["CONTACT"] = "contact";
            Fields["CONTACT_TYPE"] = "contact_type";
            Fields["STATUS"] = "status";
            Fields["SEVERITY"] = "severity";
            Fields["SUPPORT_TIER"] = "support_tier";
            Fields["RESOLUTION"] = "resolution";
            Fields["CLOSE_NOTES"] = "close_notes";
            Fields["INVOICE_NUMBER"] = "invoice_number";
            Fields["AGENT_CLOSE_ONLY"] = "agent_close_only";
            Fields["EU"] = "eu";
            Fields["WATCHLIST"] = "watchlist";
            Fields["ATTACHMENTS"] = "attachments";
            Fields["RESOURCES"] = "resources";
            Fields["COMMENTS"] = "comments";
            Fields["OFFERING"] = "offering";
        })(Fields = GetCasesConstants.Fields || (GetCasesConstants.Fields = {}));
    })(GetCasesConstants = CaseManagementV1.GetCasesConstants || (CaseManagementV1.GetCasesConstants = {}));
    /** Constants for the `createCase` operation. */
    var CreateCaseConstants;
    (function (CreateCaseConstants) {
        /** Case type. */
        var Type;
        (function (Type) {
            Type["TECHNICAL"] = "technical";
            Type["ACCOUNT_AND_ACCESS"] = "account_and_access";
            Type["BILLING_AND_INVOICE"] = "billing_and_invoice";
            Type["SALES"] = "sales";
        })(Type = CreateCaseConstants.Type || (CreateCaseConstants.Type = {}));
    })(CreateCaseConstants = CaseManagementV1.CreateCaseConstants || (CaseManagementV1.CreateCaseConstants = {}));
    /** Constants for the `getCase` operation. */
    var GetCaseConstants;
    (function (GetCaseConstants) {
        /** Seleted fields of interest instead of the entire case information. */
        var Fields;
        (function (Fields) {
            Fields["NUMBER"] = "number";
            Fields["SHORT_DESCRIPTION"] = "short_description";
            Fields["DESCRIPTION"] = "description";
            Fields["CREATED_AT"] = "created_at";
            Fields["CREATED_BY"] = "created_by";
            Fields["UPDATED_AT"] = "updated_at";
            Fields["UPDATED_BY"] = "updated_by";
            Fields["CONTACT"] = "contact";
            Fields["CONTACT_TYPE"] = "contact_type";
            Fields["STATUS"] = "status";
            Fields["SEVERITY"] = "severity";
            Fields["SUPPORT_TIER"] = "support_tier";
            Fields["RESOLUTION"] = "resolution";
            Fields["CLOSE_NOTES"] = "close_notes";
            Fields["INVOICE_NUMBER"] = "invoice_number";
            Fields["AGENT_CLOSE_ONLY"] = "agent_close_only";
            Fields["EU"] = "eu";
            Fields["WATCHLIST"] = "watchlist";
            Fields["ATTACHMENTS"] = "attachments";
            Fields["RESOURCES"] = "resources";
            Fields["COMMENTS"] = "comments";
            Fields["OFFERING"] = "offering";
        })(Fields = GetCaseConstants.Fields || (GetCaseConstants.Fields = {}));
    })(GetCaseConstants = CaseManagementV1.GetCaseConstants || (CaseManagementV1.GetCaseConstants = {}));
})(CaseManagementV1 || (CaseManagementV1 = {}));
module.exports = CaseManagementV1;
//# sourceMappingURL=v1.js.map