"use strict";
/**
 * (C) Copyright IBM Corp. 2021.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
/**
 * IBM OpenAPI SDK Code Generator Version: 3.32.0-4c6a3129-20210514-210323
 */
var extend = require("extend");
var ibm_cloud_sdk_core_1 = require("ibm-cloud-sdk-core");
var common_1 = require("../lib/common");
/**
 * Manage lifecycle of your Cloud resources using Resource Controller APIs. Resources are provisioned globally in an
 * account scope. Supports asynchronous provisioning of resources. Enables consumption of a global resource through a
 * Cloud Foundry space in any region.
 */
var ResourceControllerV2 = /** @class */ (function (_super) {
    __extends(ResourceControllerV2, _super);
    /**
     * Construct a ResourceControllerV2 object.
     *
     * @param {Object} options - Options for the service.
     * @param {string} [options.serviceUrl] - The base url to use when contacting the service. The base url may differ between IBM Cloud regions.
     * @param {OutgoingHttpHeaders} [options.headers] - Default headers that shall be included with every request to the service.
     * @param {Authenticator} options.authenticator - The Authenticator object used to authenticate requests to the service
     * @constructor
     * @returns {ResourceControllerV2}
     */
    function ResourceControllerV2(options) {
        var _this = this;
        options = options || {};
        _this = _super.call(this, options) || this;
        if (options.serviceUrl) {
            _this.setServiceUrl(options.serviceUrl);
        }
        else {
            _this.setServiceUrl(ResourceControllerV2.DEFAULT_SERVICE_URL);
        }
        return _this;
    }
    /*************************
     * Factory method
     ************************/
    /**
     * Constructs an instance of ResourceControllerV2 with passed in options and external configuration.
     *
     * @param {UserOptions} [options] - The parameters to send to the service.
     * @param {string} [options.serviceName] - The name of the service to configure
     * @param {Authenticator} [options.authenticator] - The Authenticator object used to authenticate requests to the service
     * @param {string} [options.serviceUrl] - The URL for the service
     * @returns {ResourceControllerV2}
     */
    ResourceControllerV2.newInstance = function (options) {
        options = options || {};
        if (!options.serviceName) {
            options.serviceName = this.DEFAULT_SERVICE_NAME;
        }
        if (!options.authenticator) {
            options.authenticator = ibm_cloud_sdk_core_1.getAuthenticatorFromEnvironment(options.serviceName);
        }
        var service = new ResourceControllerV2(options);
        service.configureService(options.serviceName);
        if (options.serviceUrl) {
            service.setServiceUrl(options.serviceUrl);
        }
        return service;
    };
    /*************************
     * resourceInstances
     ************************/
    /**
     * Get a list of all resource instances.
     *
     * View a list of all available resource instances. Resources is a broad term that could mean anything from a service
     * instance to a virtual machine associated with the customer account.
     *
     * @param {Object} [params] - The parameters to send to the service.
     * @param {string} [params.guid] - When you provision a new resource in the specified location for the selected plan,
     * a GUID (globally unique identifier) is created. This is a unique internal GUID managed by Resource controller that
     * corresponds to the instance.
     * @param {string} [params.name] - The human-readable name of the instance.
     * @param {string} [params.resourceGroupId] - Short ID of a resource group.
     * @param {string} [params.resourceId] - The unique ID of the offering. This value is provided by and stored in the
     * global catalog.
     * @param {string} [params.resourcePlanId] - The unique ID of the plan associated with the offering. This value is
     * provided by and stored in the global catalog.
     * @param {string} [params.type] - The type of the instance, for example, `service_instance`.
     * @param {string} [params.subType] - The sub-type of instance, for example, `cfaas`.
     * @param {number} [params.limit] - Limit on how many items should be returned.
     * @param {string} [params.start] - An optional token that indicates the beginning of the page of results to be
     * returned. Any additional query parameters are ignored if a page token is present. If omitted, the first page of
     * results is returned. This value is obtained from the 'next_url' field of the operation response.
     * @param {string} [params.state] - The state of the instance. If not specified, instances in state `active` and
     * `provisioning` are returned.
     * @param {string} [params.updatedFrom] - Start date inclusive filter.
     * @param {string} [params.updatedTo] - End date inclusive filter.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<ResourceControllerV2.Response<ResourceControllerV2.ResourceInstancesList>>}
     */
    ResourceControllerV2.prototype.listResourceInstances = function (params) {
        var _params = __assign({}, params);
        var query = {
            'guid': _params.guid,
            'name': _params.name,
            'resource_group_id': _params.resourceGroupId,
            'resource_id': _params.resourceId,
            'resource_plan_id': _params.resourcePlanId,
            'type': _params.type,
            'sub_type': _params.subType,
            'limit': _params.limit,
            'start': _params.start,
            'state': _params.state,
            'updated_from': _params.updatedFrom,
            'updated_to': _params.updatedTo,
        };
        var sdkHeaders = common_1.getSdkHeaders(ResourceControllerV2.DEFAULT_SERVICE_NAME, 'v2', 'listResourceInstances');
        var parameters = {
            options: {
                url: '/v2/resource_instances',
                method: 'GET',
                qs: query,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * Create (provision) a new resource instance.
     *
     * When you provision a service you get an instance of that service. An instance represents the resource with which
     * you create, and additionally, represents a chargeable record of which billing can occur.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.name - The name of the instance. Must be 180 characters or less and cannot include any
     * special characters other than `(space) - . _ :`.
     * @param {string} params.target - The deployment location where the instance should be hosted.
     * @param {string} params.resourceGroup - Short or long ID of resource group.
     * @param {string} params.resourcePlanId - The unique ID of the plan associated with the offering. This value is
     * provided by and stored in the global catalog.
     * @param {string[]} [params.tags] - Tags that are attached to the instance after provisioning. These tags can be
     * searched and managed through the Tagging API in IBM Cloud.
     * @param {boolean} [params.allowCleanup] - A boolean that dictates if the resource instance should be deleted
     * (cleaned up) during the processing of a region instance delete call.
     * @param {JsonObject} [params.parameters] - Configuration options represented as key-value pairs that are passed
     * through to the target resource brokers.
     * @param {boolean} [params.entityLock] - Indicates if the resource instance is locked for further update or delete
     * operations. It does not affect actions performed on child resources like aliases, bindings or keys. False by
     * default.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<ResourceControllerV2.Response<ResourceControllerV2.ResourceInstance>>}
     */
    ResourceControllerV2.prototype.createResourceInstance = function (params) {
        var _params = __assign({}, params);
        var requiredParams = ['name', 'target', 'resourceGroup', 'resourcePlanId'];
        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var body = {
            'name': _params.name,
            'target': _params.target,
            'resource_group': _params.resourceGroup,
            'resource_plan_id': _params.resourcePlanId,
            'tags': _params.tags,
            'allow_cleanup': _params.allowCleanup,
            'parameters': _params.parameters,
        };
        var sdkHeaders = common_1.getSdkHeaders(ResourceControllerV2.DEFAULT_SERVICE_NAME, 'v2', 'createResourceInstance');
        var parameters = {
            options: {
                url: '/v2/resource_instances',
                method: 'POST',
                body: body,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json',
                    'Entity-Lock': _params.entityLock,
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * Get a resource instance.
     *
     * Retrieve a resource instance by ID. Find more details on a particular instance, like when it was provisioned and
     * who provisioned it.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.id - The short or long ID of the instance.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<ResourceControllerV2.Response<ResourceControllerV2.ResourceInstance>>}
     */
    ResourceControllerV2.prototype.getResourceInstance = function (params) {
        var _params = __assign({}, params);
        var requiredParams = ['id'];
        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var path = {
            'id': _params.id,
        };
        var sdkHeaders = common_1.getSdkHeaders(ResourceControllerV2.DEFAULT_SERVICE_NAME, 'v2', 'getResourceInstance');
        var parameters = {
            options: {
                url: '/v2/resource_instances/{id}',
                method: 'GET',
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * Delete a resource instance.
     *
     * Delete a resource instance by ID. If the resource instance has any resource keys or aliases associated with it, use
     * the `recursive=true parameter` to delete it.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.id - The short or long ID of the instance.
     * @param {boolean} [params.recursive] - Will delete resource bindings, keys and aliases associated with the instance.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<ResourceControllerV2.Response<ResourceControllerV2.Empty>>}
     */
    ResourceControllerV2.prototype.deleteResourceInstance = function (params) {
        var _params = __assign({}, params);
        var requiredParams = ['id'];
        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var query = {
            'recursive': _params.recursive,
        };
        var path = {
            'id': _params.id,
        };
        var sdkHeaders = common_1.getSdkHeaders(ResourceControllerV2.DEFAULT_SERVICE_NAME, 'v2', 'deleteResourceInstance');
        var parameters = {
            options: {
                url: '/v2/resource_instances/{id}',
                method: 'DELETE',
                qs: query,
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {}, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * Update a resource instance.
     *
     * You can use the ID to make updates to the resource instance, like changing the name or plan.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.id - The short or long ID of the instance.
     * @param {string} [params.name] - The new name of the instance. Must be 180 characters or less and cannot include any
     * special characters other than `(space) - . _ :`.
     * @param {JsonObject} [params.parameters] - The new configuration options for the instance.
     * @param {string} [params.resourcePlanId] - The unique ID of the plan associated with the offering. This value is
     * provided by and stored in the global catalog.
     * @param {boolean} [params.allowCleanup] - A boolean that dictates if the resource instance should be deleted
     * (cleaned up) during the processing of a region instance delete call.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<ResourceControllerV2.Response<ResourceControllerV2.ResourceInstance>>}
     */
    ResourceControllerV2.prototype.updateResourceInstance = function (params) {
        var _params = __assign({}, params);
        var requiredParams = ['id'];
        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var body = {
            'name': _params.name,
            'parameters': _params.parameters,
            'resource_plan_id': _params.resourcePlanId,
            'allow_cleanup': _params.allowCleanup,
        };
        var path = {
            'id': _params.id,
        };
        var sdkHeaders = common_1.getSdkHeaders(ResourceControllerV2.DEFAULT_SERVICE_NAME, 'v2', 'updateResourceInstance');
        var parameters = {
            options: {
                url: '/v2/resource_instances/{id}',
                method: 'PATCH',
                body: body,
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * Get a list of all resource aliases for the instance.
     *
     * Retrieving a list of all resource aliases can help you find out who's using the resource instance.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.id - The short or long ID of the instance.
     * @param {number} [params.limit] - Limit on how many items should be returned.
     * @param {string} [params.start] - An optional token that indicates the beginning of the page of results to be
     * returned. Any additional query parameters are ignored if a page token is present. If omitted, the first page of
     * results is returned. This value is obtained from the 'next_url' field of the operation response.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<ResourceControllerV2.Response<ResourceControllerV2.ResourceAliasesList>>}
     */
    ResourceControllerV2.prototype.listResourceAliasesForInstance = function (params) {
        var _params = __assign({}, params);
        var requiredParams = ['id'];
        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var query = {
            'limit': _params.limit,
            'start': _params.start,
        };
        var path = {
            'id': _params.id,
        };
        var sdkHeaders = common_1.getSdkHeaders(ResourceControllerV2.DEFAULT_SERVICE_NAME, 'v2', 'listResourceAliasesForInstance');
        var parameters = {
            options: {
                url: '/v2/resource_instances/{id}/resource_aliases',
                method: 'GET',
                qs: query,
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * Get a list of all the resource keys for the instance.
     *
     * You may have many resource keys for one resource instance. For example, you may have a different resource key for
     * each user or each role.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.id - The short or long ID of the instance.
     * @param {number} [params.limit] - Limit on how many items should be returned.
     * @param {string} [params.start] - An optional token that indicates the beginning of the page of results to be
     * returned. Any additional query parameters are ignored if a page token is present. If omitted, the first page of
     * results is returned. This value is obtained from the 'next_url' field of the operation response.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<ResourceControllerV2.Response<ResourceControllerV2.ResourceKeysList>>}
     */
    ResourceControllerV2.prototype.listResourceKeysForInstance = function (params) {
        var _params = __assign({}, params);
        var requiredParams = ['id'];
        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var query = {
            'limit': _params.limit,
            'start': _params.start,
        };
        var path = {
            'id': _params.id,
        };
        var sdkHeaders = common_1.getSdkHeaders(ResourceControllerV2.DEFAULT_SERVICE_NAME, 'v2', 'listResourceKeysForInstance');
        var parameters = {
            options: {
                url: '/v2/resource_instances/{id}/resource_keys',
                method: 'GET',
                qs: query,
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * Lock a resource instance.
     *
     * Locks a resource instance by ID. A locked instance can not be updated or deleted. It does not affect actions
     * performed on child resources like aliases, bindings or keys.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.id - The short or long ID of the instance.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<ResourceControllerV2.Response<ResourceControllerV2.ResourceInstance>>}
     */
    ResourceControllerV2.prototype.lockResourceInstance = function (params) {
        var _params = __assign({}, params);
        var requiredParams = ['id'];
        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var path = {
            'id': _params.id,
        };
        var sdkHeaders = common_1.getSdkHeaders(ResourceControllerV2.DEFAULT_SERVICE_NAME, 'v2', 'lockResourceInstance');
        var parameters = {
            options: {
                url: '/v2/resource_instances/{id}/lock',
                method: 'POST',
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * Unlock a resource instance.
     *
     * Unlock a resource instance to update or delete it. Unlocking a resource instance does not affect child resources
     * like aliases, bindings or keys.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.id - The short or long ID of the instance.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<ResourceControllerV2.Response<ResourceControllerV2.ResourceInstance>>}
     */
    ResourceControllerV2.prototype.unlockResourceInstance = function (params) {
        var _params = __assign({}, params);
        var requiredParams = ['id'];
        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var path = {
            'id': _params.id,
        };
        var sdkHeaders = common_1.getSdkHeaders(ResourceControllerV2.DEFAULT_SERVICE_NAME, 'v2', 'unlockResourceInstance');
        var parameters = {
            options: {
                url: '/v2/resource_instances/{id}/lock',
                method: 'DELETE',
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /*************************
     * resourceKeys
     ************************/
    /**
     * Get a list of all of the resource keys.
     *
     * View all of the resource keys that exist for all of your resource instances.
     *
     * @param {Object} [params] - The parameters to send to the service.
     * @param {string} [params.guid] - When you create a new key, a GUID (globally unique identifier) is assigned. This is
     * a unique internal GUID managed by Resource controller that corresponds to the key.
     * @param {string} [params.name] - The human-readable name of the key.
     * @param {string} [params.resourceGroupId] - The short ID of the resource group.
     * @param {string} [params.resourceId] - The unique ID of the offering. This value is provided by and stored in the
     * global catalog.
     * @param {number} [params.limit] - Limit on how many items should be returned.
     * @param {string} [params.start] - An optional token that indicates the beginning of the page of results to be
     * returned. Any additional query parameters are ignored if a page token is present. If omitted, the first page of
     * results is returned. This value is obtained from the 'next_url' field of the operation response.
     * @param {string} [params.updatedFrom] - Start date inclusive filter.
     * @param {string} [params.updatedTo] - End date inclusive filter.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<ResourceControllerV2.Response<ResourceControllerV2.ResourceKeysList>>}
     */
    ResourceControllerV2.prototype.listResourceKeys = function (params) {
        var _params = __assign({}, params);
        var query = {
            'guid': _params.guid,
            'name': _params.name,
            'resource_group_id': _params.resourceGroupId,
            'resource_id': _params.resourceId,
            'limit': _params.limit,
            'start': _params.start,
            'updated_from': _params.updatedFrom,
            'updated_to': _params.updatedTo,
        };
        var sdkHeaders = common_1.getSdkHeaders(ResourceControllerV2.DEFAULT_SERVICE_NAME, 'v2', 'listResourceKeys');
        var parameters = {
            options: {
                url: '/v2/resource_keys',
                method: 'GET',
                qs: query,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * Create a new resource key.
     *
     * A resource key is a saved credential you can use to authenticate with a resource instance.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.name - The name of the key.
     * @param {string} params.source - The short or long ID of resource instance or alias.
     * @param {ResourceKeyPostParameters} [params.parameters] - Configuration options represented as key-value pairs.
     * Service defined options are passed through to the target resource brokers, whereas platform defined options are
     * not.
     * @param {string} [params.role] - The role name or it's CRN.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<ResourceControllerV2.Response<ResourceControllerV2.ResourceKey>>}
     */
    ResourceControllerV2.prototype.createResourceKey = function (params) {
        var _params = __assign({}, params);
        var requiredParams = ['name', 'source'];
        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var body = {
            'name': _params.name,
            'source': _params.source,
            'parameters': _params.parameters,
            'role': _params.role,
        };
        var sdkHeaders = common_1.getSdkHeaders(ResourceControllerV2.DEFAULT_SERVICE_NAME, 'v2', 'createResourceKey');
        var parameters = {
            options: {
                url: '/v2/resource_keys',
                method: 'POST',
                body: body,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * Get resource key by ID.
     *
     * View a resource key and all of its details, like the credentials for the key and who created it.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.id - The short or long ID of the key.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<ResourceControllerV2.Response<ResourceControllerV2.ResourceKey>>}
     */
    ResourceControllerV2.prototype.getResourceKey = function (params) {
        var _params = __assign({}, params);
        var requiredParams = ['id'];
        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var path = {
            'id': _params.id,
        };
        var sdkHeaders = common_1.getSdkHeaders(ResourceControllerV2.DEFAULT_SERVICE_NAME, 'v2', 'getResourceKey');
        var parameters = {
            options: {
                url: '/v2/resource_keys/{id}',
                method: 'GET',
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * Delete a resource key by ID.
     *
     * Deleting a resource key does not affect any resource instance or resource alias associated with the key.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.id - The short or long ID of the key.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<ResourceControllerV2.Response<ResourceControllerV2.Empty>>}
     */
    ResourceControllerV2.prototype.deleteResourceKey = function (params) {
        var _params = __assign({}, params);
        var requiredParams = ['id'];
        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var path = {
            'id': _params.id,
        };
        var sdkHeaders = common_1.getSdkHeaders(ResourceControllerV2.DEFAULT_SERVICE_NAME, 'v2', 'deleteResourceKey');
        var parameters = {
            options: {
                url: '/v2/resource_keys/{id}',
                method: 'DELETE',
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {}, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * Update a resource key.
     *
     * Use the resource key ID to update the name of the resource key.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.id - The short or long ID of the key.
     * @param {string} params.name - The new name of the key. Must be 180 characters or less and cannot include any
     * special characters other than `(space) - . _ :`.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<ResourceControllerV2.Response<ResourceControllerV2.ResourceKey>>}
     */
    ResourceControllerV2.prototype.updateResourceKey = function (params) {
        var _params = __assign({}, params);
        var requiredParams = ['id', 'name'];
        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var body = {
            'name': _params.name,
        };
        var path = {
            'id': _params.id,
        };
        var sdkHeaders = common_1.getSdkHeaders(ResourceControllerV2.DEFAULT_SERVICE_NAME, 'v2', 'updateResourceKey');
        var parameters = {
            options: {
                url: '/v2/resource_keys/{id}',
                method: 'PATCH',
                body: body,
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /*************************
     * resourceBindings
     ************************/
    /**
     * Get a list of all resource bindings.
     *
     * View all of the resource bindings that exist for all of your resource aliases.
     *
     * @param {Object} [params] - The parameters to send to the service.
     * @param {string} [params.guid] - The short ID of the binding.
     * @param {string} [params.name] - The human-readable name of the binding.
     * @param {string} [params.resourceGroupId] - Short ID of the resource group.
     * @param {string} [params.resourceId] - The unique ID of the offering (service name). This value is provided by and
     * stored in the global catalog.
     * @param {string} [params.regionBindingId] - Short ID of the binding in the specific targeted environment, for
     * example, service_binding_id in a given IBM Cloud environment.
     * @param {number} [params.limit] - Limit on how many items should be returned.
     * @param {string} [params.start] - An optional token that indicates the beginning of the page of results to be
     * returned. Any additional query parameters are ignored if a page token is present. If omitted, the first page of
     * results is returned. This value is obtained from the 'next_url' field of the operation response.
     * @param {string} [params.updatedFrom] - Start date inclusive filter.
     * @param {string} [params.updatedTo] - End date inclusive filter.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<ResourceControllerV2.Response<ResourceControllerV2.ResourceBindingsList>>}
     */
    ResourceControllerV2.prototype.listResourceBindings = function (params) {
        var _params = __assign({}, params);
        var query = {
            'guid': _params.guid,
            'name': _params.name,
            'resource_group_id': _params.resourceGroupId,
            'resource_id': _params.resourceId,
            'region_binding_id': _params.regionBindingId,
            'limit': _params.limit,
            'start': _params.start,
            'updated_from': _params.updatedFrom,
            'updated_to': _params.updatedTo,
        };
        var sdkHeaders = common_1.getSdkHeaders(ResourceControllerV2.DEFAULT_SERVICE_NAME, 'v2', 'listResourceBindings');
        var parameters = {
            options: {
                url: '/v2/resource_bindings',
                method: 'GET',
                qs: query,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * Create a new resource binding.
     *
     * A resource binding connects credentials to a resource alias. The credentials are in the form of a resource key.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.source - The short or long ID of resource alias.
     * @param {string} params.target - The CRN of application to bind to in a specific environment, for example, Dallas
     * YP, CFEE instance.
     * @param {string} [params.name] - The name of the binding. Must be 180 characters or less and cannot include any
     * special characters other than `(space) - . _ :`.
     * @param {ResourceBindingPostParameters} [params.parameters] - Configuration options represented as key-value pairs.
     * Service defined options are passed through to the target resource brokers, whereas platform defined options are
     * not.
     * @param {string} [params.role] - The role name or it's CRN.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<ResourceControllerV2.Response<ResourceControllerV2.ResourceBinding>>}
     */
    ResourceControllerV2.prototype.createResourceBinding = function (params) {
        var _params = __assign({}, params);
        var requiredParams = ['source', 'target'];
        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var body = {
            'source': _params.source,
            'target': _params.target,
            'name': _params.name,
            'parameters': _params.parameters,
            'role': _params.role,
        };
        var sdkHeaders = common_1.getSdkHeaders(ResourceControllerV2.DEFAULT_SERVICE_NAME, 'v2', 'createResourceBinding');
        var parameters = {
            options: {
                url: '/v2/resource_bindings',
                method: 'POST',
                body: body,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * Get a resource binding.
     *
     * View a resource binding and all of its details, like who created it, the credential, and the resource alias that
     * the binding is associated with.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.id - The short or long ID of the binding.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<ResourceControllerV2.Response<ResourceControllerV2.ResourceBinding>>}
     */
    ResourceControllerV2.prototype.getResourceBinding = function (params) {
        var _params = __assign({}, params);
        var requiredParams = ['id'];
        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var path = {
            'id': _params.id,
        };
        var sdkHeaders = common_1.getSdkHeaders(ResourceControllerV2.DEFAULT_SERVICE_NAME, 'v2', 'getResourceBinding');
        var parameters = {
            options: {
                url: '/v2/resource_bindings/{id}',
                method: 'GET',
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * Delete a resource binding.
     *
     * Deleting a resource binding does not affect the resource alias that the binding is associated with.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.id - The short or long ID of the binding.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<ResourceControllerV2.Response<ResourceControllerV2.Empty>>}
     */
    ResourceControllerV2.prototype.deleteResourceBinding = function (params) {
        var _params = __assign({}, params);
        var requiredParams = ['id'];
        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var path = {
            'id': _params.id,
        };
        var sdkHeaders = common_1.getSdkHeaders(ResourceControllerV2.DEFAULT_SERVICE_NAME, 'v2', 'deleteResourceBinding');
        var parameters = {
            options: {
                url: '/v2/resource_bindings/{id}',
                method: 'DELETE',
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {}, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * Update a resource binding.
     *
     * Use the resource binding ID to update the name of the resource binding.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.id - The short or long ID of the binding.
     * @param {string} params.name - The new name of the binding. Must be 180 characters or less and cannot include any
     * special characters other than `(space) - . _ :`.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<ResourceControllerV2.Response<ResourceControllerV2.ResourceBinding>>}
     */
    ResourceControllerV2.prototype.updateResourceBinding = function (params) {
        var _params = __assign({}, params);
        var requiredParams = ['id', 'name'];
        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var body = {
            'name': _params.name,
        };
        var path = {
            'id': _params.id,
        };
        var sdkHeaders = common_1.getSdkHeaders(ResourceControllerV2.DEFAULT_SERVICE_NAME, 'v2', 'updateResourceBinding');
        var parameters = {
            options: {
                url: '/v2/resource_bindings/{id}',
                method: 'PATCH',
                body: body,
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /*************************
     * resourceAliases
     ************************/
    /**
     * Get a list of all resource aliases.
     *
     * View all of the resource aliases that exist for every resource instance.
     *
     * @param {Object} [params] - The parameters to send to the service.
     * @param {string} [params.guid] - Short ID of the alias.
     * @param {string} [params.name] - The human-readable name of the alias.
     * @param {string} [params.resourceInstanceId] - Resource instance short ID.
     * @param {string} [params.regionInstanceId] - Short ID of the instance in a specific targeted environment. For
     * example, `service_instance_id` in a given IBM Cloud environment.
     * @param {string} [params.resourceId] - The unique ID of the offering (service name). This value is provided by and
     * stored in the global catalog.
     * @param {string} [params.resourceGroupId] - Short ID of Resource group.
     * @param {number} [params.limit] - Limit on how many items should be returned.
     * @param {string} [params.start] - An optional token that indicates the beginning of the page of results to be
     * returned. Any additional query parameters are ignored if a page token is present. If omitted, the first page of
     * results is returned. This value is obtained from the 'next_url' field of the operation response.
     * @param {string} [params.updatedFrom] - Start date inclusive filter.
     * @param {string} [params.updatedTo] - End date inclusive filter.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<ResourceControllerV2.Response<ResourceControllerV2.ResourceAliasesList>>}
     */
    ResourceControllerV2.prototype.listResourceAliases = function (params) {
        var _params = __assign({}, params);
        var query = {
            'guid': _params.guid,
            'name': _params.name,
            'resource_instance_id': _params.resourceInstanceId,
            'region_instance_id': _params.regionInstanceId,
            'resource_id': _params.resourceId,
            'resource_group_id': _params.resourceGroupId,
            'limit': _params.limit,
            'start': _params.start,
            'updated_from': _params.updatedFrom,
            'updated_to': _params.updatedTo,
        };
        var sdkHeaders = common_1.getSdkHeaders(ResourceControllerV2.DEFAULT_SERVICE_NAME, 'v2', 'listResourceAliases');
        var parameters = {
            options: {
                url: '/v2/resource_aliases',
                method: 'GET',
                qs: query,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * Create a new resource alias.
     *
     * Alias a resource instance into a targeted environment's (name)space.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.name - The name of the alias. Must be 180 characters or less and cannot include any special
     * characters other than `(space) - . _ :`.
     * @param {string} params.source - The short or long ID of resource instance.
     * @param {string} params.target - The CRN of target name(space) in a specific environment, for example, space in
     * Dallas YP, CFEE instance etc.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<ResourceControllerV2.Response<ResourceControllerV2.ResourceAlias>>}
     */
    ResourceControllerV2.prototype.createResourceAlias = function (params) {
        var _params = __assign({}, params);
        var requiredParams = ['name', 'source', 'target'];
        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var body = {
            'name': _params.name,
            'source': _params.source,
            'target': _params.target,
        };
        var sdkHeaders = common_1.getSdkHeaders(ResourceControllerV2.DEFAULT_SERVICE_NAME, 'v2', 'createResourceAlias');
        var parameters = {
            options: {
                url: '/v2/resource_aliases',
                method: 'POST',
                body: body,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * Get a resource alias.
     *
     * View a resource alias and all of its details, like who created it and the resource instance that it's associated
     * with.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.id - The short or long ID of the alias.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<ResourceControllerV2.Response<ResourceControllerV2.ResourceAlias>>}
     */
    ResourceControllerV2.prototype.getResourceAlias = function (params) {
        var _params = __assign({}, params);
        var requiredParams = ['id'];
        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var path = {
            'id': _params.id,
        };
        var sdkHeaders = common_1.getSdkHeaders(ResourceControllerV2.DEFAULT_SERVICE_NAME, 'v2', 'getResourceAlias');
        var parameters = {
            options: {
                url: '/v2/resource_aliases/{id}',
                method: 'GET',
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * Delete a resource alias.
     *
     * If the resource alias has any resource keys or bindings associated with it, you must delete those child resources
     * before deleting the resource alias.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.id - The short or long ID of the alias.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<ResourceControllerV2.Response<ResourceControllerV2.Empty>>}
     */
    ResourceControllerV2.prototype.deleteResourceAlias = function (params) {
        var _params = __assign({}, params);
        var requiredParams = ['id'];
        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var path = {
            'id': _params.id,
        };
        var sdkHeaders = common_1.getSdkHeaders(ResourceControllerV2.DEFAULT_SERVICE_NAME, 'v2', 'deleteResourceAlias');
        var parameters = {
            options: {
                url: '/v2/resource_aliases/{id}',
                method: 'DELETE',
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {}, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * Update a resource alias.
     *
     * Use the resource alias ID to update the name of the resource alias.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.id - The short or long ID of the alias.
     * @param {string} params.name - The new name of the alias. Must be 180 characters or less and cannot include any
     * special characters other than `(space) - . _ :`.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<ResourceControllerV2.Response<ResourceControllerV2.ResourceAlias>>}
     */
    ResourceControllerV2.prototype.updateResourceAlias = function (params) {
        var _params = __assign({}, params);
        var requiredParams = ['id', 'name'];
        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var body = {
            'name': _params.name,
        };
        var path = {
            'id': _params.id,
        };
        var sdkHeaders = common_1.getSdkHeaders(ResourceControllerV2.DEFAULT_SERVICE_NAME, 'v2', 'updateResourceAlias');
        var parameters = {
            options: {
                url: '/v2/resource_aliases/{id}',
                method: 'PATCH',
                body: body,
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * Get a list of all resource bindings for the alias.
     *
     * View all of the resource bindings associated with a specific resource alias.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.id - The short or long ID of the alias.
     * @param {number} [params.limit] - Limit on how many items should be returned.
     * @param {string} [params.start] - An optional token that indicates the beginning of the page of results to be
     * returned. Any additional query parameters are ignored if a page token is present. If omitted, the first page of
     * results is returned. This value is obtained from the 'next_url' field of the operation response.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<ResourceControllerV2.Response<ResourceControllerV2.ResourceBindingsList>>}
     */
    ResourceControllerV2.prototype.listResourceBindingsForAlias = function (params) {
        var _params = __assign({}, params);
        var requiredParams = ['id'];
        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var query = {
            'limit': _params.limit,
            'start': _params.start,
        };
        var path = {
            'id': _params.id,
        };
        var sdkHeaders = common_1.getSdkHeaders(ResourceControllerV2.DEFAULT_SERVICE_NAME, 'v2', 'listResourceBindingsForAlias');
        var parameters = {
            options: {
                url: '/v2/resource_aliases/{id}/resource_bindings',
                method: 'GET',
                qs: query,
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /*************************
     * resourceReclamations
     ************************/
    /**
     * Get a list of all reclamations.
     *
     * View all of the resource reclamations that exist for every resource instance.
     *
     * @param {Object} [params] - The parameters to send to the service.
     * @param {string} [params.accountId] - An alpha-numeric value identifying the account ID.
     * @param {string} [params.resourceInstanceId] - The short ID of the resource instance.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<ResourceControllerV2.Response<ResourceControllerV2.ReclamationsList>>}
     */
    ResourceControllerV2.prototype.listReclamations = function (params) {
        var _params = __assign({}, params);
        var query = {
            'account_id': _params.accountId,
            'resource_instance_id': _params.resourceInstanceId,
        };
        var sdkHeaders = common_1.getSdkHeaders(ResourceControllerV2.DEFAULT_SERVICE_NAME, 'v2', 'listReclamations');
        var parameters = {
            options: {
                url: '/v1/reclamations',
                method: 'GET',
                qs: query,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * Perform a reclamation action.
     *
     * Reclaim a resource instance so that it can no longer be used, or restore the resource instance so that it's usable
     * again.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.id - The ID associated with the reclamation.
     * @param {string} params.actionName - The reclamation action name. Specify `reclaim` to delete a resource, or
     * `restore` to restore a resource.
     * @param {string} [params.requestBy] - The request initiator, if different from the request token.
     * @param {string} [params.comment] - A comment to describe the action.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<ResourceControllerV2.Response<ResourceControllerV2.Reclamation>>}
     */
    ResourceControllerV2.prototype.runReclamationAction = function (params) {
        var _params = __assign({}, params);
        var requiredParams = ['id', 'actionName'];
        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var body = {
            'request_by': _params.requestBy,
            'comment': _params.comment,
        };
        var path = {
            'id': _params.id,
            'action_name': _params.actionName,
        };
        var sdkHeaders = common_1.getSdkHeaders(ResourceControllerV2.DEFAULT_SERVICE_NAME, 'v2', 'runReclamationAction');
        var parameters = {
            options: {
                url: '/v1/reclamations/{id}/actions/{action_name}',
                method: 'POST',
                body: body,
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    ResourceControllerV2.DEFAULT_SERVICE_URL = 'https://resource-controller.cloud.ibm.com';
    ResourceControllerV2.DEFAULT_SERVICE_NAME = 'resource_controller';
    return ResourceControllerV2;
}(ibm_cloud_sdk_core_1.BaseService));
/*************************
 * interfaces
 ************************/
(function (ResourceControllerV2) {
    /** Constants for the `listResourceInstances` operation. */
    var ListResourceInstancesConstants;
    (function (ListResourceInstancesConstants) {
        /** The state of the instance. If not specified, instances in state `active` and `provisioning` are returned. */
        var State;
        (function (State) {
            State["ACTIVE"] = "active";
            State["PROVISIONING"] = "provisioning";
            State["REMOVED"] = "removed";
        })(State = ListResourceInstancesConstants.State || (ListResourceInstancesConstants.State = {}));
    })(ListResourceInstancesConstants = ResourceControllerV2.ListResourceInstancesConstants || (ResourceControllerV2.ListResourceInstancesConstants = {}));
})(ResourceControllerV2 || (ResourceControllerV2 = {}));
module.exports = ResourceControllerV2;
//# sourceMappingURL=v2.js.map