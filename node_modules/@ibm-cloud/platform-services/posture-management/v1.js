"use strict";
/**
 * (C) Copyright IBM Corp. 2021.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
/**
 * IBM OpenAPI SDK Code Generator Version: 3.29.1-b338fb38-20210313-010605
 */
var extend = require("extend");
var ibm_cloud_sdk_core_1 = require("ibm-cloud-sdk-core");
var common_1 = require("../lib/common");
/**
 * With IBM CloudÂ® Security and Compliance Center, you can embed checks into your every day workflows to help manage
 * your current security and compliance posture. By monitoring for risks, you can identify security vulnerabilities and
 * quickly work to mitigate the impact.
 */
var PostureManagementV1 = /** @class */ (function (_super) {
    __extends(PostureManagementV1, _super);
    /**
     * Construct a PostureManagementV1 object.
     *
     * @param {Object} options - Options for the service.
     * @param {string} [options.serviceUrl] - The base url to use when contacting the service. The base url may differ between IBM Cloud regions.
     * @param {OutgoingHttpHeaders} [options.headers] - Default headers that shall be included with every request to the service.
     * @param {Authenticator} options.authenticator - The Authenticator object used to authenticate requests to the service
     * @constructor
     * @returns {PostureManagementV1}
     */
    function PostureManagementV1(options) {
        var _this = this;
        options = options || {};
        _this = _super.call(this, options) || this;
        if (options.serviceUrl) {
            _this.setServiceUrl(options.serviceUrl);
        }
        return _this;
    }
    /*************************
     * Factory method
     ************************/
    /**
     * Constructs an instance of PostureManagementV1 with passed in options and external configuration.
     *
     * @param {UserOptions} [options] - The parameters to send to the service.
     * @param {string} [options.serviceName] - The name of the service to configure
     * @param {Authenticator} [options.authenticator] - The Authenticator object used to authenticate requests to the service
     * @param {string} [options.serviceUrl] - The URL for the service
     * @returns {PostureManagementV1}
     */
    PostureManagementV1.newInstance = function (options) {
        options = options || {};
        if (!options.serviceName) {
            options.serviceName = this.DEFAULT_SERVICE_NAME;
        }
        if (!options.authenticator) {
            options.authenticator = ibm_cloud_sdk_core_1.getAuthenticatorFromEnvironment(options.serviceName);
        }
        var service = new PostureManagementV1(options);
        service.configureService(options.serviceName);
        if (options.serviceUrl) {
            service.setServiceUrl(options.serviceUrl);
        }
        return service;
    };
    /*************************
     * scans
     ************************/
    /**
     * Initiate a validations scan.
     *
     * Validations scans determine a specified scope's adherence to regulatory controls by validating the configuration of
     * the resources in your scope to the attached profile. To initiate a scan, you must have configured a collector,
     * provided credentials, and completed both a fact collection and discovery scan. [Learn
     * more](/docs/security-compliance?topic=security-compliance-schedule-scan).
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.accountId - Your IBM Cloud account ID.
     * @param {string} [params.scopeId] - The unique ID of the scope.
     * @param {string} [params.profileId] - The unique ID of the profile.
     * @param {string} [params.groupProfileId] - The ID of the profile group.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<PostureManagementV1.Response<PostureManagementV1.Result>>}
     */
    PostureManagementV1.prototype.createValidation = function (params) {
        var _params = __assign({}, params);
        var requiredParams = ['accountId'];
        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var body = {
            'scope_id': _params.scopeId,
            'profile_id': _params.profileId,
            'group_profile_id': _params.groupProfileId,
        };
        var query = {
            'account_id': _params.accountId,
        };
        var sdkHeaders = common_1.getSdkHeaders(PostureManagementV1.DEFAULT_SERVICE_NAME, 'v1', 'createValidation');
        var parameters = {
            options: {
                url: '/posture/v1/scans/validations',
                method: 'POST',
                body: body,
                qs: query,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /*************************
     * profiles
     ************************/
    /**
     * List profiles.
     *
     * List all of the profiles that are available in your account. To view a specific profile, you can filter by name.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.accountId - Your account ID.
     * @param {string} [params.name] - The name of the profile.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<PostureManagementV1.Response<PostureManagementV1.ProfilesList>>}
     */
    PostureManagementV1.prototype.listProfiles = function (params) {
        var _params = __assign({}, params);
        var requiredParams = ['accountId'];
        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var query = {
            'account_id': _params.accountId,
            'name': _params.name,
        };
        var sdkHeaders = common_1.getSdkHeaders(PostureManagementV1.DEFAULT_SERVICE_NAME, 'v1', 'listProfiles');
        var parameters = {
            options: {
                url: '/posture/v1/profiles',
                method: 'GET',
                qs: query,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /*************************
     * scopes
     ************************/
    /**
     * List scopes.
     *
     * List all of the scopes that are available in your account. To view a specific scope, you can filter by name.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.accountId - Your IBM Cloud account ID.
     * @param {string} [params.name] - The name of the scope.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<PostureManagementV1.Response<PostureManagementV1.ScopesList>>}
     */
    PostureManagementV1.prototype.listScopes = function (params) {
        var _params = __assign({}, params);
        var requiredParams = ['accountId'];
        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var query = {
            'account_id': _params.accountId,
            'name': _params.name,
        };
        var sdkHeaders = common_1.getSdkHeaders(PostureManagementV1.DEFAULT_SERVICE_NAME, 'v1', 'listScopes');
        var parameters = {
            options: {
                url: '/posture/v1/scopes',
                method: 'GET',
                qs: query,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    PostureManagementV1.DEFAULT_SERVICE_NAME = 'posture_management';
    return PostureManagementV1;
}(ibm_cloud_sdk_core_1.BaseService));
module.exports = PostureManagementV1;
//# sourceMappingURL=v1.js.map