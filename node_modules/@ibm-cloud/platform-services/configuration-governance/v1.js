"use strict";
/**
 * (C) Copyright IBM Corp. 2021.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
/**
 * IBM OpenAPI SDK Code Generator Version: 99-SNAPSHOT-c6db7f4a-20210114-141015
 */
var extend = require("extend");
var ibm_cloud_sdk_core_1 = require("ibm-cloud-sdk-core");
var common_1 = require("../lib/common");
/**
 * API specification for the Configuration Governance service.
 */
var ConfigurationGovernanceV1 = /** @class */ (function (_super) {
    __extends(ConfigurationGovernanceV1, _super);
    /**
     * Construct a ConfigurationGovernanceV1 object.
     *
     * @param {Object} options - Options for the service.
     * @param {string} [options.serviceUrl] - The base url to use when contacting the service. The base url may differ between IBM Cloud regions.
     * @param {OutgoingHttpHeaders} [options.headers] - Default headers that shall be included with every request to the service.
     * @param {Authenticator} options.authenticator - The Authenticator object used to authenticate requests to the service
     * @constructor
     * @returns {ConfigurationGovernanceV1}
     */
    function ConfigurationGovernanceV1(options) {
        var _this = this;
        options = options || {};
        _this = _super.call(this, options) || this;
        if (options.serviceUrl) {
            _this.setServiceUrl(options.serviceUrl);
        }
        else {
            _this.setServiceUrl(ConfigurationGovernanceV1.DEFAULT_SERVICE_URL);
        }
        return _this;
    }
    /*************************
     * Factory method
     ************************/
    /**
     * Constructs an instance of ConfigurationGovernanceV1 with passed in options and external configuration.
     *
     * @param {UserOptions} [options] - The parameters to send to the service.
     * @param {string} [options.serviceName] - The name of the service to configure
     * @param {Authenticator} [options.authenticator] - The Authenticator object used to authenticate requests to the service
     * @param {string} [options.serviceUrl] - The URL for the service
     * @returns {ConfigurationGovernanceV1}
     */
    ConfigurationGovernanceV1.newInstance = function (options) {
        options = options || {};
        if (!options.serviceName) {
            options.serviceName = this.DEFAULT_SERVICE_NAME;
        }
        if (!options.authenticator) {
            options.authenticator = ibm_cloud_sdk_core_1.getAuthenticatorFromEnvironment(options.serviceName);
        }
        var service = new ConfigurationGovernanceV1(options);
        service.configureService(options.serviceName);
        if (options.serviceUrl) {
            service.setServiceUrl(options.serviceUrl);
        }
        return service;
    };
    /*************************
     * rules
     ************************/
    /**
     * Create rules.
     *
     * Creates one or more rules that you can use to govern the way that IBM Cloud resources can be provisioned and
     * configured.
     *
     * A successful `POST /config/rules` request defines a rule based on the target, conditions, and enforcement actions
     * that you specify. The response returns the ID value for your rule, along with other metadata.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {CreateRuleRequest[]} params.rules - A list of rules to be created.
     * @param {string} [params.transactionId] - The unique identifier that is used to trace an entire request. If you omit
     * this field, the service generates and sends a transaction ID as a response header of the request. In the case of an
     * error, the transaction ID is set in the `trace` field of the response body.
     *
     * **Note:** To help with debugging logs, it is strongly recommended that you generate and supply a `Transaction-Id`
     * with each request.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<ConfigurationGovernanceV1.Response<ConfigurationGovernanceV1.CreateRulesResponse>>}
     */
    ConfigurationGovernanceV1.prototype.createRules = function (params) {
        var _params = __assign({}, params);
        var requiredParams = ['rules'];
        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var body = {
            'rules': _params.rules,
        };
        var sdkHeaders = common_1.getSdkHeaders(ConfigurationGovernanceV1.DEFAULT_SERVICE_NAME, 'v1', 'createRules');
        var parameters = {
            options: {
                url: '/config/v1/rules',
                method: 'POST',
                body: body,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json',
                    'Transaction-Id': _params.transactionId,
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * List rules.
     *
     * Retrieves a list of the rules that are available in your account.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.accountId - Your IBM Cloud account ID.
     * @param {string} [params.transactionId] - The unique identifier that is used to trace an entire request. If you omit
     * this field, the service generates and sends a transaction ID as a response header of the request. In the case of an
     * error, the transaction ID is set in the `trace` field of the response body.
     *
     * **Note:** To help with debugging logs, it is strongly recommended that you generate and supply a `Transaction-Id`
     * with each request.
     * @param {boolean} [params.attached] - Retrieves a list of rules that have scope attachments.
     * @param {string} [params.labels] - Retrieves a list of rules that match the labels that you specify.
     * @param {string} [params.scopes] - Retrieves a list of rules that match the scope ID that you specify.
     * @param {number} [params.limit] - The number of resources to retrieve. By default, list operations return the first
     * 100 items. To retrieve a different set of items, use `limit` with `offset` to page through your available
     * resources.
     *
     * **Usage:** If you have 20 rules, and you want to retrieve only the first 5 rules, use
     * `../rules?account_id={account_id}&limit=5`.
     * @param {number} [params.offset] - The number of resources to skip. By specifying `offset`, you retrieve a subset of
     * resources that starts with the `offset` value. Use `offset` with `limit` to page through your available resources.
     *
     * **Usage:** If you have 100 rules, and you want to retrieve rules 26 through 50, use
     * `../rules?account_id={account_id}&offset=25&limit=5`.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<ConfigurationGovernanceV1.Response<ConfigurationGovernanceV1.RuleList>>}
     */
    ConfigurationGovernanceV1.prototype.listRules = function (params) {
        var _params = __assign({}, params);
        var requiredParams = ['accountId'];
        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var query = {
            'account_id': _params.accountId,
            'attached': _params.attached,
            'labels': _params.labels,
            'scopes': _params.scopes,
            'limit': _params.limit,
            'offset': _params.offset,
        };
        var sdkHeaders = common_1.getSdkHeaders(ConfigurationGovernanceV1.DEFAULT_SERVICE_NAME, 'v1', 'listRules');
        var parameters = {
            options: {
                url: '/config/v1/rules',
                method: 'GET',
                qs: query,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                    'Transaction-Id': _params.transactionId,
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * Get a rule.
     *
     * Retrieves an existing rule and its details.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.ruleId - The UUID that uniquely identifies the rule.
     * @param {string} [params.transactionId] - The unique identifier that is used to trace an entire request. If you omit
     * this field, the service generates and sends a transaction ID as a response header of the request. In the case of an
     * error, the transaction ID is set in the `trace` field of the response body.
     *
     * **Note:** To help with debugging logs, it is strongly recommended that you generate and supply a `Transaction-Id`
     * with each request.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<ConfigurationGovernanceV1.Response<ConfigurationGovernanceV1.Rule>>}
     */
    ConfigurationGovernanceV1.prototype.getRule = function (params) {
        var _params = __assign({}, params);
        var requiredParams = ['ruleId'];
        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var path = {
            'rule_id': _params.ruleId,
        };
        var sdkHeaders = common_1.getSdkHeaders(ConfigurationGovernanceV1.DEFAULT_SERVICE_NAME, 'v1', 'getRule');
        var parameters = {
            options: {
                url: '/config/v1/rules/{rule_id}',
                method: 'GET',
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                    'Transaction-Id': _params.transactionId,
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * Update a rule.
     *
     * Updates an existing rule based on the properties that you specify.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.ruleId - The UUID that uniquely identifies the rule.
     * @param {string} params.ifMatch - Compares a supplied `Etag` value with the version that is stored for the requested
     * resource. If the values match, the server allows the request method to continue.
     *
     * To find the `Etag` value, run a GET request on the resource that you want to modify, and check the response
     * headers.
     * @param {string} params.name - A human-readable alias to assign to your rule.
     * @param {string} params.description - An extended description of your rule.
     * @param {TargetResource} params.target - The properties that describe the resource that you want to target
     * with the rule.
     * @param {RuleRequiredConfig} params.requiredConfig -
     * @param {EnforcementAction[]} params.enforcementActions - The actions that the service must run on your behalf when
     * a request to create or modify the target resource does not comply with your conditions.
     * @param {string} [params.accountId] - Your IBM Cloud account ID.
     * @param {string} [params.ruleType] - The type of rule. Rules that you create are `user_defined`.
     * @param {string[]} [params.labels] - Labels that you can use to group and search for similar rules, such as those
     * that help you to meet a specific organization guideline.
     * @param {string} [params.transactionId] - The unique identifier that is used to trace an entire request. If you omit
     * this field, the service generates and sends a transaction ID as a response header of the request. In the case of an
     * error, the transaction ID is set in the `trace` field of the response body.
     *
     * **Note:** To help with debugging logs, it is strongly recommended that you generate and supply a `Transaction-Id`
     * with each request.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<ConfigurationGovernanceV1.Response<ConfigurationGovernanceV1.Rule>>}
     */
    ConfigurationGovernanceV1.prototype.updateRule = function (params) {
        var _params = __assign({}, params);
        var requiredParams = [
            'ruleId',
            'ifMatch',
            'name',
            'description',
            'target',
            'requiredConfig',
            'enforcementActions',
        ];
        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var body = {
            'name': _params.name,
            'description': _params.description,
            'target': _params.target,
            'required_config': _params.requiredConfig,
            'enforcement_actions': _params.enforcementActions,
            'account_id': _params.accountId,
            'rule_type': _params.ruleType,
            'labels': _params.labels,
        };
        var path = {
            'rule_id': _params.ruleId,
        };
        var sdkHeaders = common_1.getSdkHeaders(ConfigurationGovernanceV1.DEFAULT_SERVICE_NAME, 'v1', 'updateRule');
        var parameters = {
            options: {
                url: '/config/v1/rules/{rule_id}',
                method: 'PUT',
                body: body,
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json',
                    'If-Match': _params.ifMatch,
                    'Transaction-Id': _params.transactionId,
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * Delete a rule.
     *
     * Deletes an existing rule.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.ruleId - The UUID that uniquely identifies the rule.
     * @param {string} [params.transactionId] - The unique identifier that is used to trace an entire request. If you omit
     * this field, the service generates and sends a transaction ID as a response header of the request. In the case of an
     * error, the transaction ID is set in the `trace` field of the response body.
     *
     * **Note:** To help with debugging logs, it is strongly recommended that you generate and supply a `Transaction-Id`
     * with each request.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<ConfigurationGovernanceV1.Response<ConfigurationGovernanceV1.Empty>>}
     */
    ConfigurationGovernanceV1.prototype.deleteRule = function (params) {
        var _params = __assign({}, params);
        var requiredParams = ['ruleId'];
        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var path = {
            'rule_id': _params.ruleId,
        };
        var sdkHeaders = common_1.getSdkHeaders(ConfigurationGovernanceV1.DEFAULT_SERVICE_NAME, 'v1', 'deleteRule');
        var parameters = {
            options: {
                url: '/config/v1/rules/{rule_id}',
                method: 'DELETE',
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Transaction-Id': _params.transactionId,
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * Create attachments.
     *
     * Creates one or more scope attachments for an existing rule.
     *
     * You can attach an existing rule to a scope, such as a specific IBM Cloud account, to start evaluating the rule for
     * compliance. A successful
     * `POST /config/v1/rules/{rule_id}/attachments` returns the ID value for the attachment, along with other metadata.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.ruleId - The UUID that uniquely identifies the rule.
     * @param {AttachmentRequest[]} params.attachments -
     * @param {string} [params.transactionId] - The unique identifier that is used to trace an entire request. If you omit
     * this field, the service generates and sends a transaction ID as a response header of the request. In the case of an
     * error, the transaction ID is set in the `trace` field of the response body.
     *
     * **Note:** To help with debugging logs, it is strongly recommended that you generate and supply a `Transaction-Id`
     * with each request.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<ConfigurationGovernanceV1.Response<ConfigurationGovernanceV1.CreateAttachmentsResponse>>}
     */
    ConfigurationGovernanceV1.prototype.createAttachments = function (params) {
        var _params = __assign({}, params);
        var requiredParams = ['ruleId', 'attachments'];
        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var body = {
            'attachments': _params.attachments,
        };
        var path = {
            'rule_id': _params.ruleId,
        };
        var sdkHeaders = common_1.getSdkHeaders(ConfigurationGovernanceV1.DEFAULT_SERVICE_NAME, 'v1', 'createAttachments');
        var parameters = {
            options: {
                url: '/config/v1/rules/{rule_id}/attachments',
                method: 'POST',
                body: body,
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json',
                    'Transaction-Id': _params.transactionId,
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * List attachments.
     *
     * Retrieves a list of scope attachments that are associated with the specified rule.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.ruleId - The UUID that uniquely identifies the rule.
     * @param {string} [params.transactionId] - The unique identifier that is used to trace an entire request. If you omit
     * this field, the service generates and sends a transaction ID as a response header of the request. In the case of an
     * error, the transaction ID is set in the `trace` field of the response body.
     *
     * **Note:** To help with debugging logs, it is strongly recommended that you generate and supply a `Transaction-Id`
     * with each request.
     * @param {number} [params.limit] - The number of resources to retrieve. By default, list operations return the first
     * 100 items. To retrieve a different set of items, use `limit` with `offset` to page through your available
     * resources.
     *
     * **Usage:** If you have 20 rules, and you want to retrieve only the first 5 rules, use
     * `../rules?account_id={account_id}&limit=5`.
     * @param {number} [params.offset] - The number of resources to skip. By specifying `offset`, you retrieve a subset of
     * resources that starts with the `offset` value. Use `offset` with `limit` to page through your available resources.
     *
     * **Usage:** If you have 100 rules, and you want to retrieve rules 26 through 50, use
     * `../rules?account_id={account_id}&offset=25&limit=5`.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<ConfigurationGovernanceV1.Response<ConfigurationGovernanceV1.AttachmentList>>}
     */
    ConfigurationGovernanceV1.prototype.listAttachments = function (params) {
        var _params = __assign({}, params);
        var requiredParams = ['ruleId'];
        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var query = {
            'limit': _params.limit,
            'offset': _params.offset,
        };
        var path = {
            'rule_id': _params.ruleId,
        };
        var sdkHeaders = common_1.getSdkHeaders(ConfigurationGovernanceV1.DEFAULT_SERVICE_NAME, 'v1', 'listAttachments');
        var parameters = {
            options: {
                url: '/config/v1/rules/{rule_id}/attachments',
                method: 'GET',
                qs: query,
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                    'Transaction-Id': _params.transactionId,
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * Get an attachment.
     *
     * Retrieves an existing scope attachment for a rule.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.ruleId - The UUID that uniquely identifies the rule.
     * @param {string} params.attachmentId - The UUID that uniquely identifies the attachment.
     * @param {string} [params.transactionId] - The unique identifier that is used to trace an entire request. If you omit
     * this field, the service generates and sends a transaction ID as a response header of the request. In the case of an
     * error, the transaction ID is set in the `trace` field of the response body.
     *
     * **Note:** To help with debugging logs, it is strongly recommended that you generate and supply a `Transaction-Id`
     * with each request.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<ConfigurationGovernanceV1.Response<ConfigurationGovernanceV1.Attachment>>}
     */
    ConfigurationGovernanceV1.prototype.getAttachment = function (params) {
        var _params = __assign({}, params);
        var requiredParams = ['ruleId', 'attachmentId'];
        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var path = {
            'rule_id': _params.ruleId,
            'attachment_id': _params.attachmentId,
        };
        var sdkHeaders = common_1.getSdkHeaders(ConfigurationGovernanceV1.DEFAULT_SERVICE_NAME, 'v1', 'getAttachment');
        var parameters = {
            options: {
                url: '/config/v1/rules/{rule_id}/attachments/{attachment_id}',
                method: 'GET',
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                    'Transaction-Id': _params.transactionId,
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * Update an attachment.
     *
     * Updates an existing scope attachment based on the properties that you specify.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.ruleId - The UUID that uniquely identifies the rule.
     * @param {string} params.attachmentId - The UUID that uniquely identifies the attachment.
     * @param {string} params.ifMatch - Compares a supplied `Etag` value with the version that is stored for the requested
     * resource. If the values match, the server allows the request method to continue.
     *
     * To find the `Etag` value, run a GET request on the resource that you want to modify, and check the response
     * headers.
     * @param {string} params.accountId - Your IBM Cloud account ID.
     * @param {RuleScope} params.includedScope - The extent at which the rule can be attached across your accounts.
     * @param {RuleScope[]} [params.excludedScopes] - The extent at which the rule can be excluded from the included
     * scope.
     * @param {string} [params.transactionId] - The unique identifier that is used to trace an entire request. If you omit
     * this field, the service generates and sends a transaction ID as a response header of the request. In the case of an
     * error, the transaction ID is set in the `trace` field of the response body.
     *
     * **Note:** To help with debugging logs, it is strongly recommended that you generate and supply a `Transaction-Id`
     * with each request.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<ConfigurationGovernanceV1.Response<ConfigurationGovernanceV1.Attachment>>}
     */
    ConfigurationGovernanceV1.prototype.updateAttachment = function (params) {
        var _params = __assign({}, params);
        var requiredParams = ['ruleId', 'attachmentId', 'ifMatch', 'accountId', 'includedScope'];
        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var body = {
            'account_id': _params.accountId,
            'included_scope': _params.includedScope,
            'excluded_scopes': _params.excludedScopes,
        };
        var path = {
            'rule_id': _params.ruleId,
            'attachment_id': _params.attachmentId,
        };
        var sdkHeaders = common_1.getSdkHeaders(ConfigurationGovernanceV1.DEFAULT_SERVICE_NAME, 'v1', 'updateAttachment');
        var parameters = {
            options: {
                url: '/config/v1/rules/{rule_id}/attachments/{attachment_id}',
                method: 'PUT',
                body: body,
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json',
                    'If-Match': _params.ifMatch,
                    'Transaction-Id': _params.transactionId,
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * Delete an attachment.
     *
     * Deletes an existing scope attachment.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.ruleId - The UUID that uniquely identifies the rule.
     * @param {string} params.attachmentId - The UUID that uniquely identifies the attachment.
     * @param {string} [params.transactionId] - The unique identifier that is used to trace an entire request. If you omit
     * this field, the service generates and sends a transaction ID as a response header of the request. In the case of an
     * error, the transaction ID is set in the `trace` field of the response body.
     *
     * **Note:** To help with debugging logs, it is strongly recommended that you generate and supply a `Transaction-Id`
     * with each request.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<ConfigurationGovernanceV1.Response<ConfigurationGovernanceV1.Empty>>}
     */
    ConfigurationGovernanceV1.prototype.deleteAttachment = function (params) {
        var _params = __assign({}, params);
        var requiredParams = ['ruleId', 'attachmentId'];
        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var path = {
            'rule_id': _params.ruleId,
            'attachment_id': _params.attachmentId,
        };
        var sdkHeaders = common_1.getSdkHeaders(ConfigurationGovernanceV1.DEFAULT_SERVICE_NAME, 'v1', 'deleteAttachment');
        var parameters = {
            options: {
                url: '/config/v1/rules/{rule_id}/attachments/{attachment_id}',
                method: 'DELETE',
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Transaction-Id': _params.transactionId,
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    ConfigurationGovernanceV1.DEFAULT_SERVICE_URL = 'https://compliance.cloud.ibm.com';
    ConfigurationGovernanceV1.DEFAULT_SERVICE_NAME = 'configuration_governance';
    return ConfigurationGovernanceV1;
}(ibm_cloud_sdk_core_1.BaseService));
/*************************
 * interfaces
 ************************/
(function (ConfigurationGovernanceV1) {
    /** Constants for the `updateRule` operation. */
    var UpdateRuleConstants;
    (function (UpdateRuleConstants) {
        /** The type of rule. Rules that you create are `user_defined`. */
        var RuleType;
        (function (RuleType) {
            RuleType["USER_DEFINED"] = "user_defined";
        })(RuleType = UpdateRuleConstants.RuleType || (UpdateRuleConstants.RuleType = {}));
    })(UpdateRuleConstants = ConfigurationGovernanceV1.UpdateRuleConstants || (ConfigurationGovernanceV1.UpdateRuleConstants = {}));
})(ConfigurationGovernanceV1 || (ConfigurationGovernanceV1 = {}));
module.exports = ConfigurationGovernanceV1;
//# sourceMappingURL=v1.js.map