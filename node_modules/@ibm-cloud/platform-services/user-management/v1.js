"use strict";
/**
 * (C) Copyright IBM Corp. 2020.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
/**
 * IBM OpenAPI SDK Code Generator Version: 99-SNAPSHOT-d753183b-20201209-163011
 */
var extend = require("extend");
var ibm_cloud_sdk_core_1 = require("ibm-cloud-sdk-core");
var common_1 = require("../lib/common");
/**
 * Manage the lifecycle of your users using User Management APIs.
 */
var UserManagementV1 = /** @class */ (function (_super) {
    __extends(UserManagementV1, _super);
    /**
     * Construct a UserManagementV1 object.
     *
     * @param {Object} options - Options for the service.
     * @param {string} [options.serviceUrl] - The base url to use when contacting the service. The base url may differ between IBM Cloud regions.
     * @param {OutgoingHttpHeaders} [options.headers] - Default headers that shall be included with every request to the service.
     * @param {Authenticator} options.authenticator - The Authenticator object used to authenticate requests to the service
     * @constructor
     * @returns {UserManagementV1}
     */
    function UserManagementV1(options) {
        var _this = this;
        options = options || {};
        _this = _super.call(this, options) || this;
        if (options.serviceUrl) {
            _this.setServiceUrl(options.serviceUrl);
        }
        else {
            _this.setServiceUrl(UserManagementV1.DEFAULT_SERVICE_URL);
        }
        return _this;
    }
    /*************************
     * Factory method
     ************************/
    /**
     * Constructs an instance of UserManagementV1 with passed in options and external configuration.
     *
     * @param {UserOptions} [options] - The parameters to send to the service.
     * @param {string} [options.serviceName] - The name of the service to configure
     * @param {Authenticator} [options.authenticator] - The Authenticator object used to authenticate requests to the service
     * @param {string} [options.serviceUrl] - The URL for the service
     * @returns {UserManagementV1}
     */
    UserManagementV1.newInstance = function (options) {
        options = options || {};
        if (!options.serviceName) {
            options.serviceName = this.DEFAULT_SERVICE_NAME;
        }
        if (!options.authenticator) {
            options.authenticator = ibm_cloud_sdk_core_1.getAuthenticatorFromEnvironment(options.serviceName);
        }
        var service = new UserManagementV1(options);
        service.configureService(options.serviceName);
        if (options.serviceUrl) {
            service.setServiceUrl(options.serviceUrl);
        }
        return service;
    };
    /*************************
     * users
     ************************/
    /**
     * List users.
     *
     * Retrieve users in the account. You can use the IAM service token or a user token for authorization. To use this
     * method, the requesting user or service ID must have at least the viewer, editor, or administrator role on the User
     * Management service. If unrestricted view is enabled, the user can see all users in the same account without an IAM
     * role. If restricted view is enabled and user has the viewer, editor, or administrator role on the user management
     * service, the API returns all users in the account. If unrestricted view is enabled and the user does not have these
     * roles, the API returns only the current user. Users are returned in a paginated list with a default limit of 100
     * users. You can iterate through all users by following the `next_url` field.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.accountId - The account ID.
     * @param {string} [params.state] - The state of the user.
     * @param {number} [params.limit] - The number of results to be returned.
     * @param {string} [params.start] - An optional token that indicates the beginning of the page of results to be
     * returned. If omitted, the first page of results is returned. This value is obtained from the 'next_url' field of
     * the operation response.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<UserManagementV1.Response<UserManagementV1.UserList>>}
     */
    UserManagementV1.prototype.listUsers = function (params) {
        var _params = __assign({}, params);
        var requiredParams = ['accountId'];
        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var query = {
            'state': _params.state,
            'limit': _params.limit,
            '_start': _params.start,
        };
        var path = {
            'account_id': _params.accountId,
        };
        var sdkHeaders = common_1.getSdkHeaders(UserManagementV1.DEFAULT_SERVICE_NAME, 'v1', 'listUsers');
        var parameters = {
            options: {
                url: '/v2/accounts/{account_id}/users',
                method: 'GET',
                qs: query,
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * Invite users to an account.
     *
     * Invite users to the account. You must use a user token for authorization. Service IDs can't invite users to the
     * account. To use this method, the requesting user must have the editor or administrator role on the User Management
     * service. For more information, see the [Inviting
     * users](https://cloud.ibm.com/docs/account?topic=account-iamuserinv) documentation. You can specify the user account
     * role and the corresponding IAM policy information in the request body. <br/><br/>When you invite a user to an
     * account, the user is initially created in the `PROCESSING` state. After the user is successfully created, all
     * specified permissions are configured, and the activation email is sent, the invited user is transitioned to the
     * `PENDING` state. When the invited user clicks the activation email and creates and confirms their IBM Cloud
     * account, the user is transitioned to `ACTIVE` state. If the user email is already verified, no email is generated.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.accountId - The account ID.
     * @param {InviteUser[]} [params.users] - A list of users to be invited.
     * @param {InviteUserIamPolicy[]} [params.iamPolicy] - A list of IAM policies.
     * @param {string[]} [params.accessGroups] - A list of access groups.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<UserManagementV1.Response<UserManagementV1.InvitedUserList>>}
     */
    UserManagementV1.prototype.inviteUsers = function (params) {
        var _params = __assign({}, params);
        var requiredParams = ['accountId'];
        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var body = {
            'users': _params.users,
            'iam_policy': _params.iamPolicy,
            'access_groups': _params.accessGroups,
        };
        var path = {
            'account_id': _params.accountId,
        };
        var sdkHeaders = common_1.getSdkHeaders(UserManagementV1.DEFAULT_SERVICE_NAME, 'v1', 'inviteUsers');
        var parameters = {
            options: {
                url: '/v2/accounts/{account_id}/users',
                method: 'POST',
                body: body,
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * Get user profile.
     *
     * Retrieve a user's profile by the user's IAM ID in your account. You can use the IAM service token or a user token
     * for authorization. To use this method, the requesting user or service ID must have at least the viewer, editor, or
     * administrator role on the User Management service.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.accountId - The account ID.
     * @param {string} params.iamId - The user's IAM ID.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<UserManagementV1.Response<UserManagementV1.UserProfile>>}
     */
    UserManagementV1.prototype.getUserProfile = function (params) {
        var _params = __assign({}, params);
        var requiredParams = ['accountId', 'iamId'];
        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var path = {
            'account_id': _params.accountId,
            'iam_id': _params.iamId,
        };
        var sdkHeaders = common_1.getSdkHeaders(UserManagementV1.DEFAULT_SERVICE_NAME, 'v1', 'getUserProfile');
        var parameters = {
            options: {
                url: '/v2/accounts/{account_id}/users/{iam_id}',
                method: 'GET',
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * Partially update user profile.
     *
     * Partially update a user's profile by user's IAM ID. You can use the IAM service token or a user token for
     * authorization. To use this method, the requesting user or service ID must have at least the editor or administrator
     * role on the User Management service. A user or service ID with these roles can change a user's state between
     * `ACTIVE`, `VPN_ONLY`, or `DISABLED_CLASSIC_INFRASTRUCTURE`, but they can't change the state to `PROCESSING` or
     * `PENDING` because these are system states. For other request body fields, a user can update their own profile
     * without having User Management service permissions.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.accountId - The account ID.
     * @param {string} params.iamId - The user's IAM ID.
     * @param {string} [params.firstname] - The first name of the user.
     * @param {string} [params.lastname] - The last name of the user.
     * @param {string} [params.state] - The state of the user. Possible values are `PROCESSING`, `PENDING`, `ACTIVE`,
     * `DISABLED_CLASSIC_INFRASTRUCTURE`, and `VPN_ONLY`.
     * @param {string} [params.email] - The email address of the user.
     * @param {string} [params.phonenumber] - The phone number of the user.
     * @param {string} [params.altphonenumber] - The alternative phone number of the user.
     * @param {string} [params.photo] - A link to a photo of the user.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<UserManagementV1.Response<UserManagementV1.Empty>>}
     */
    UserManagementV1.prototype.updateUserProfile = function (params) {
        var _params = __assign({}, params);
        var requiredParams = ['accountId', 'iamId'];
        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var body = {
            'firstname': _params.firstname,
            'lastname': _params.lastname,
            'state': _params.state,
            'email': _params.email,
            'phonenumber': _params.phonenumber,
            'altphonenumber': _params.altphonenumber,
            'photo': _params.photo,
        };
        var path = {
            'account_id': _params.accountId,
            'iam_id': _params.iamId,
        };
        var sdkHeaders = common_1.getSdkHeaders(UserManagementV1.DEFAULT_SERVICE_NAME, 'v1', 'updateUserProfile');
        var parameters = {
            options: {
                url: '/v2/accounts/{account_id}/users/{iam_id}',
                method: 'PATCH',
                body: body,
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Content-Type': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * Remove user from account.
     *
     * Remove users from an account by user's IAM ID. You must use a user token for authorization. Service IDs can't
     * remove users from an account. To use this method, the requesting user must have the editor or administrator role on
     * the User Management service. For more information, see the [Removing
     * users](https://cloud.ibm.com/docs/account?topic=account-remove) documentation.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.accountId - The account ID.
     * @param {string} params.iamId - The user's IAM ID.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<UserManagementV1.Response<UserManagementV1.Empty>>}
     */
    UserManagementV1.prototype.removeUser = function (params) {
        var _params = __assign({}, params);
        var requiredParams = ['accountId', 'iamId'];
        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var path = {
            'account_id': _params.accountId,
            'iam_id': _params.iamId,
        };
        var sdkHeaders = common_1.getSdkHeaders(UserManagementV1.DEFAULT_SERVICE_NAME, 'v1', 'removeUser');
        var parameters = {
            options: {
                url: '/v2/accounts/{account_id}/users/{iam_id}',
                method: 'DELETE',
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {}, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /*************************
     * userSettings
     ************************/
    /**
     * Get user settings.
     *
     * Retrieve a user's settings by the user's IAM ID. You can use the IAM service token or a user token for
     * authorization. To use this method, the requesting user or service ID must have the viewer, editor, or administrator
     * role on the User Management service. <br/><br/>The user settings have several fields. The `language` field is the
     * language setting for the user interface display language. The `notification_language` field is the language setting
     * for phone and email notifications. The `allowed_ip_addresses` field specifies a list of IP addresses that the user
     * can log in and perform operations from as described in [Allowing specific IP addresses for a
     * user](https://cloud.ibm.com/docs/account?topic=account-ips). For information about the `self_manage` field, review
     * information about the [user-managed login setting](https://cloud.ibm.com/docs/account?topic=account-types).
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.accountId - The account ID.
     * @param {string} params.iamId - The user's IAM ID.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<UserManagementV1.Response<UserManagementV1.UserSettings>>}
     */
    UserManagementV1.prototype.getUserSettings = function (params) {
        var _params = __assign({}, params);
        var requiredParams = ['accountId', 'iamId'];
        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var path = {
            'account_id': _params.accountId,
            'iam_id': _params.iamId,
        };
        var sdkHeaders = common_1.getSdkHeaders(UserManagementV1.DEFAULT_SERVICE_NAME, 'v1', 'getUserSettings');
        var parameters = {
            options: {
                url: '/v2/accounts/{account_id}/users/{iam_id}/settings',
                method: 'GET',
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * Partially update user settings.
     *
     * Update a user's settings by the user's IAM ID. You can use the IAM service token or a user token for authorization.
     * To fully use this method, the user or service ID must have the editor or administrator role on the User Management
     * service. Without these roles, a user can update only their own `language` or `notification_language` fields. If
     * `self_manage` is `true`, the user can also update the `allowed_ip_addresses` field.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.accountId - The account ID.
     * @param {string} params.iamId - The user's IAM ID.
     * @param {string} [params.language] - The console UI language. By default, this field is empty.
     * @param {string} [params.notificationLanguage] - The language for email and phone notifications. By default, this
     * field is empty.
     * @param {string} [params.allowedIpAddresses] - A comma-separated list of IP addresses.
     * @param {boolean} [params.selfManage] - Whether user managed login is enabled. The default value is `false`.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<UserManagementV1.Response<UserManagementV1.Empty>>}
     */
    UserManagementV1.prototype.updateUserSettings = function (params) {
        var _params = __assign({}, params);
        var requiredParams = ['accountId', 'iamId'];
        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var body = {
            'language': _params.language,
            'notification_language': _params.notificationLanguage,
            'allowed_ip_addresses': _params.allowedIpAddresses,
            'self_manage': _params.selfManage,
        };
        var path = {
            'account_id': _params.accountId,
            'iam_id': _params.iamId,
        };
        var sdkHeaders = common_1.getSdkHeaders(UserManagementV1.DEFAULT_SERVICE_NAME, 'v1', 'updateUserSettings');
        var parameters = {
            options: {
                url: '/v2/accounts/{account_id}/users/{iam_id}/settings',
                method: 'PATCH',
                body: body,
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Content-Type': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    UserManagementV1.DEFAULT_SERVICE_URL = 'https://user-management.cloud.ibm.com';
    UserManagementV1.DEFAULT_SERVICE_NAME = 'user_management';
    return UserManagementV1;
}(ibm_cloud_sdk_core_1.BaseService));
module.exports = UserManagementV1;
//# sourceMappingURL=v1.js.map