"use strict";
/**
 * (C) Copyright IBM Corp. 2021.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
/**
 * IBM OpenAPI SDK Code Generator Version: 3.36.0-6f5b0381-20210716-180747
 */
var extend = require("extend");
var ibm_cloud_sdk_core_1 = require("ibm-cloud-sdk-core");
var common_1 = require("../lib/common");
/**
 * Usage reports for IBM Cloud accounts
 */
var UsageReportsV4 = /** @class */ (function (_super) {
    __extends(UsageReportsV4, _super);
    /**
     * Construct a UsageReportsV4 object.
     *
     * @param {Object} options - Options for the service.
     * @param {string} [options.serviceUrl] - The base url to use when contacting the service. The base url may differ between IBM Cloud regions.
     * @param {OutgoingHttpHeaders} [options.headers] - Default headers that shall be included with every request to the service.
     * @param {Authenticator} options.authenticator - The Authenticator object used to authenticate requests to the service
     * @constructor
     * @returns {UsageReportsV4}
     */
    function UsageReportsV4(options) {
        var _this = this;
        options = options || {};
        _this = _super.call(this, options) || this;
        if (options.serviceUrl) {
            _this.setServiceUrl(options.serviceUrl);
        }
        else {
            _this.setServiceUrl(UsageReportsV4.DEFAULT_SERVICE_URL);
        }
        return _this;
    }
    /*************************
     * Factory method
     ************************/
    /**
     * Constructs an instance of UsageReportsV4 with passed in options and external configuration.
     *
     * @param {UserOptions} [options] - The parameters to send to the service.
     * @param {string} [options.serviceName] - The name of the service to configure
     * @param {Authenticator} [options.authenticator] - The Authenticator object used to authenticate requests to the service
     * @param {string} [options.serviceUrl] - The URL for the service
     * @returns {UsageReportsV4}
     */
    UsageReportsV4.newInstance = function (options) {
        options = options || {};
        if (!options.serviceName) {
            options.serviceName = this.DEFAULT_SERVICE_NAME;
        }
        if (!options.authenticator) {
            options.authenticator = ibm_cloud_sdk_core_1.getAuthenticatorFromEnvironment(options.serviceName);
        }
        var service = new UsageReportsV4(options);
        service.configureService(options.serviceName);
        if (options.serviceUrl) {
            service.setServiceUrl(options.serviceUrl);
        }
        return service;
    };
    /*************************
     * accountOperations
     ************************/
    /**
     * Get account summary.
     *
     * Returns the summary for the account for a given month. Account billing managers are authorized to access this
     * report.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.accountId - Account ID for which the usage report is requested.
     * @param {string} params.billingmonth - The billing month for which the usage report is requested.  Format is
     * yyyy-mm.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<UsageReportsV4.Response<UsageReportsV4.AccountSummary>>}
     */
    UsageReportsV4.prototype.getAccountSummary = function (params) {
        var _params = __assign({}, params);
        var requiredParams = ['accountId', 'billingmonth'];
        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var path = {
            'account_id': _params.accountId,
            'billingmonth': _params.billingmonth,
        };
        var sdkHeaders = common_1.getSdkHeaders(UsageReportsV4.DEFAULT_SERVICE_NAME, 'v4', 'getAccountSummary');
        var parameters = {
            options: {
                url: '/v4/accounts/{account_id}/summary/{billingmonth}',
                method: 'GET',
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * Get account usage.
     *
     * Usage for all the resources and plans in an account for a given month. Account billing managers are authorized to
     * access this report.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.accountId - Account ID for which the usage report is requested.
     * @param {string} params.billingmonth - The billing month for which the usage report is requested.  Format is
     * yyyy-mm.
     * @param {boolean} [params.names] - Include the name of every resource, plan, resource instance, organization, and
     * resource group.
     * @param {string} [params.acceptLanguage] - Prioritize the names returned in the order of the specified languages.
     * Language will default to English.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<UsageReportsV4.Response<UsageReportsV4.AccountUsage>>}
     */
    UsageReportsV4.prototype.getAccountUsage = function (params) {
        var _params = __assign({}, params);
        var requiredParams = ['accountId', 'billingmonth'];
        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var query = {
            '_names': _params.names,
        };
        var path = {
            'account_id': _params.accountId,
            'billingmonth': _params.billingmonth,
        };
        var sdkHeaders = common_1.getSdkHeaders(UsageReportsV4.DEFAULT_SERVICE_NAME, 'v4', 'getAccountUsage');
        var parameters = {
            options: {
                url: '/v4/accounts/{account_id}/usage/{billingmonth}',
                method: 'GET',
                qs: query,
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                    'Accept-Language': _params.acceptLanguage,
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /*************************
     * resourceOperations
     ************************/
    /**
     * Get resource group usage.
     *
     * Usage for all the resources and plans in a resource group in a given month. Account billing managers or resource
     * group billing managers are authorized to access this report.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.accountId - Account ID for which the usage report is requested.
     * @param {string} params.resourceGroupId - Resource group for which the usage report is requested.
     * @param {string} params.billingmonth - The billing month for which the usage report is requested.  Format is
     * yyyy-mm.
     * @param {boolean} [params.names] - Include the name of every resource, plan, resource instance, organization, and
     * resource group.
     * @param {string} [params.acceptLanguage] - Prioritize the names returned in the order of the specified languages.
     * Language will default to English.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<UsageReportsV4.Response<UsageReportsV4.ResourceGroupUsage>>}
     */
    UsageReportsV4.prototype.getResourceGroupUsage = function (params) {
        var _params = __assign({}, params);
        var requiredParams = ['accountId', 'resourceGroupId', 'billingmonth'];
        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var query = {
            '_names': _params.names,
        };
        var path = {
            'account_id': _params.accountId,
            'resource_group_id': _params.resourceGroupId,
            'billingmonth': _params.billingmonth,
        };
        var sdkHeaders = common_1.getSdkHeaders(UsageReportsV4.DEFAULT_SERVICE_NAME, 'v4', 'getResourceGroupUsage');
        var parameters = {
            options: {
                url: '/v4/accounts/{account_id}/resource_groups/{resource_group_id}/usage/{billingmonth}',
                method: 'GET',
                qs: query,
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                    'Accept-Language': _params.acceptLanguage,
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * Get resource instance usage in an account.
     *
     * Query for resource instance usage in an account. Filter the results with query parameters. Account billing
     * administrator is authorized to access this report.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.accountId - Account ID for which the usage report is requested.
     * @param {string} params.billingmonth - The billing month for which the usage report is requested.  Format is
     * yyyy-mm.
     * @param {boolean} [params.names] - Include the name of every resource, plan, resource instance, organization, and
     * resource group.
     * @param {string} [params.acceptLanguage] - Prioritize the names returned in the order of the specified languages.
     * Language will default to English.
     * @param {number} [params.limit] - Number of usage records returned. The default value is 10. Maximum value is 20.
     * @param {string} [params.start] - The offset from which the records must be fetched. Offset information is included
     * in the response.
     * @param {string} [params.resourceGroupId] - Filter by resource group.
     * @param {string} [params.organizationId] - Filter by organization_id.
     * @param {string} [params.resourceInstanceId] - Filter by resource instance_id.
     * @param {string} [params.resourceId] - Filter by resource_id.
     * @param {string} [params.planId] - Filter by plan_id.
     * @param {string} [params.region] - Region in which the resource instance is provisioned.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<UsageReportsV4.Response<UsageReportsV4.InstancesUsage>>}
     */
    UsageReportsV4.prototype.getResourceUsageAccount = function (params) {
        var _params = __assign({}, params);
        var requiredParams = ['accountId', 'billingmonth'];
        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var query = {
            '_names': _params.names,
            '_limit': _params.limit,
            '_start': _params.start,
            'resource_group_id': _params.resourceGroupId,
            'organization_id': _params.organizationId,
            'resource_instance_id': _params.resourceInstanceId,
            'resource_id': _params.resourceId,
            'plan_id': _params.planId,
            'region': _params.region,
        };
        var path = {
            'account_id': _params.accountId,
            'billingmonth': _params.billingmonth,
        };
        var sdkHeaders = common_1.getSdkHeaders(UsageReportsV4.DEFAULT_SERVICE_NAME, 'v4', 'getResourceUsageAccount');
        var parameters = {
            options: {
                url: '/v4/accounts/{account_id}/resource_instances/usage/{billingmonth}',
                method: 'GET',
                qs: query,
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                    'Accept-Language': _params.acceptLanguage,
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * Get resource instance usage in a resource group.
     *
     * Query for resource instance usage in a resource group. Filter the results with query parameters. Account billing
     * administrator and resource group billing administrators are authorized to access this report.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.accountId - Account ID for which the usage report is requested.
     * @param {string} params.resourceGroupId - Resource group for which the usage report is requested.
     * @param {string} params.billingmonth - The billing month for which the usage report is requested.  Format is
     * yyyy-mm.
     * @param {boolean} [params.names] - Include the name of every resource, plan, resource instance, organization, and
     * resource group.
     * @param {string} [params.acceptLanguage] - Prioritize the names returned in the order of the specified languages.
     * Language will default to English.
     * @param {number} [params.limit] - Number of usage records returned. The default value is 10. Maximum value is 20.
     * @param {string} [params.start] - The offset from which the records must be fetched. Offset information is included
     * in the response.
     * @param {string} [params.resourceInstanceId] - Filter by resource instance id.
     * @param {string} [params.resourceId] - Filter by resource_id.
     * @param {string} [params.planId] - Filter by plan_id.
     * @param {string} [params.region] - Region in which the resource instance is provisioned.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<UsageReportsV4.Response<UsageReportsV4.InstancesUsage>>}
     */
    UsageReportsV4.prototype.getResourceUsageResourceGroup = function (params) {
        var _params = __assign({}, params);
        var requiredParams = ['accountId', 'resourceGroupId', 'billingmonth'];
        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var query = {
            '_names': _params.names,
            '_limit': _params.limit,
            '_start': _params.start,
            'resource_instance_id': _params.resourceInstanceId,
            'resource_id': _params.resourceId,
            'plan_id': _params.planId,
            'region': _params.region,
        };
        var path = {
            'account_id': _params.accountId,
            'resource_group_id': _params.resourceGroupId,
            'billingmonth': _params.billingmonth,
        };
        var sdkHeaders = common_1.getSdkHeaders(UsageReportsV4.DEFAULT_SERVICE_NAME, 'v4', 'getResourceUsageResourceGroup');
        var parameters = {
            options: {
                url: '/v4/accounts/{account_id}/resource_groups/{resource_group_id}/resource_instances/usage/{billingmonth}',
                method: 'GET',
                qs: query,
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                    'Accept-Language': _params.acceptLanguage,
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * Get resource instance usage in an organization.
     *
     * Query for resource instance usage in an organization. Filter the results with query parameters. Account billing
     * administrator and organization billing administrators are authorized to access this report.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.accountId - Account ID for which the usage report is requested.
     * @param {string} params.organizationId - ID of the organization.
     * @param {string} params.billingmonth - The billing month for which the usage report is requested.  Format is
     * yyyy-mm.
     * @param {boolean} [params.names] - Include the name of every resource, plan, resource instance, organization, and
     * resource group.
     * @param {string} [params.acceptLanguage] - Prioritize the names returned in the order of the specified languages.
     * Language will default to English.
     * @param {number} [params.limit] - Number of usage records returned. The default value is 10. Maximum value is 20.
     * @param {string} [params.start] - The offset from which the records must be fetched. Offset information is included
     * in the response.
     * @param {string} [params.resourceInstanceId] - Filter by resource instance id.
     * @param {string} [params.resourceId] - Filter by resource_id.
     * @param {string} [params.planId] - Filter by plan_id.
     * @param {string} [params.region] - Region in which the resource instance is provisioned.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<UsageReportsV4.Response<UsageReportsV4.InstancesUsage>>}
     */
    UsageReportsV4.prototype.getResourceUsageOrg = function (params) {
        var _params = __assign({}, params);
        var requiredParams = ['accountId', 'organizationId', 'billingmonth'];
        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var query = {
            '_names': _params.names,
            '_limit': _params.limit,
            '_start': _params.start,
            'resource_instance_id': _params.resourceInstanceId,
            'resource_id': _params.resourceId,
            'plan_id': _params.planId,
            'region': _params.region,
        };
        var path = {
            'account_id': _params.accountId,
            'organization_id': _params.organizationId,
            'billingmonth': _params.billingmonth,
        };
        var sdkHeaders = common_1.getSdkHeaders(UsageReportsV4.DEFAULT_SERVICE_NAME, 'v4', 'getResourceUsageOrg');
        var parameters = {
            options: {
                url: '/v4/accounts/{account_id}/organizations/{organization_id}/resource_instances/usage/{billingmonth}',
                method: 'GET',
                qs: query,
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                    'Accept-Language': _params.acceptLanguage,
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /*************************
     * organizationOperations
     ************************/
    /**
     * Get organization usage.
     *
     * Usage for all the resources and plans in an organization in a given month. Account billing managers or organization
     * billing managers are authorized to access this report.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.accountId - Account ID for which the usage report is requested.
     * @param {string} params.organizationId - ID of the organization.
     * @param {string} params.billingmonth - The billing month for which the usage report is requested.  Format is
     * yyyy-mm.
     * @param {boolean} [params.names] - Include the name of every resource, plan, resource instance, organization, and
     * resource group.
     * @param {string} [params.acceptLanguage] - Prioritize the names returned in the order of the specified languages.
     * Language will default to English.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<UsageReportsV4.Response<UsageReportsV4.OrgUsage>>}
     */
    UsageReportsV4.prototype.getOrgUsage = function (params) {
        var _params = __assign({}, params);
        var requiredParams = ['accountId', 'organizationId', 'billingmonth'];
        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var query = {
            '_names': _params.names,
        };
        var path = {
            'account_id': _params.accountId,
            'organization_id': _params.organizationId,
            'billingmonth': _params.billingmonth,
        };
        var sdkHeaders = common_1.getSdkHeaders(UsageReportsV4.DEFAULT_SERVICE_NAME, 'v4', 'getOrgUsage');
        var parameters = {
            options: {
                url: '/v4/accounts/{account_id}/organizations/{organization_id}/usage/{billingmonth}',
                method: 'GET',
                qs: query,
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                    'Accept-Language': _params.acceptLanguage,
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    UsageReportsV4.DEFAULT_SERVICE_URL = 'https://billing.cloud.ibm.com';
    UsageReportsV4.DEFAULT_SERVICE_NAME = 'usage_reports';
    return UsageReportsV4;
}(ibm_cloud_sdk_core_1.BaseService));
module.exports = UsageReportsV4;
//# sourceMappingURL=v4.js.map